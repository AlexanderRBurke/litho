"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2866],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>u,withMDXComponents:()=>m});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),m=function(e){return function(t){var n=u(t.components);return i.createElement(e,o({},t,{components:n}))}},u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,h=m["".concat(l,".").concat(c)]||m[c]||p[c]||o;return n?i.createElement(h,r(r({ref:t},s),{},{components:n})):i.createElement(h,r({ref:t},s))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var s=2;s<o;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},13919:(e,t,n)=>{function i(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!i(e)}n.d(t,{b:()=>i,Z:()=>a})},44996:(e,t,n)=>{n.r(t),n.d(t,{useBaseUrlUtils:()=>o,default:()=>l});var i=n(52263),a=n(13919);function o(){var e=(0,i.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,i){var o=void 0===i?{}:i,l=o.forcePrependBaseUrl,r=void 0!==l&&l,d=o.absolute,s=void 0!==d&&d;if(!n)return n;if(n.startsWith("#"))return n;if((0,a.b)(n))return n;if(r)return t+n;var m=n.startsWith(t)?n:t+n.replace(/^\//,"");return s?e+m:m}(o,n,e,t)}}}function l(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},58215:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(67294);const a=function(e){var t=e.children,n=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},55064:(e,t,n)=>{n.d(t,{Z:()=>u});var i=n(67294),a=n(79443);const o=function(){var e=(0,i.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var l=n(86010);const r="tabItem_1uMI",d="tabItemActive_2DSg";var s=37,m=39;const u=function(e){var t=e.lazy,n=e.block,a=e.defaultValue,u=e.values,c=e.groupId,p=e.className,h=o(),x=h.tabGroupChoices,f=h.setTabGroupChoices,g=(0,i.useState)(a),y=g[0],b=g[1],w=i.Children.toArray(e.children),v=[];if(null!=c){var N=x[c];null!=N&&N!==y&&u.some((function(e){return e.value===N}))&&b(N)}var C=function(e){var t=e.currentTarget,n=v.indexOf(t),i=u[n].value;b(i),null!=c&&(f(c,i),setTimeout((function(){var e,n,i,a,o,l,r,s;(e=t.getBoundingClientRect(),n=e.top,i=e.left,a=e.bottom,o=e.right,l=window,r=l.innerHeight,s=l.innerWidth,n>=0&&o<=s&&a<=r&&i>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(d),setTimeout((function(){return t.classList.remove(d)}),2e3))}),150))},_=function(e){var t,n;switch(e.keyCode){case m:var i=v.indexOf(e.target)+1;n=v[i]||v[0];break;case s:var a=v.indexOf(e.target)-1;n=v[a]||v[v.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.default)("tabs",{"tabs--block":n},p)},u.map((function(e){var t=e.value,n=e.label;return i.createElement("li",{role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,className:(0,l.default)("tabs__item",r,{"tabs__item--active":y===t}),key:t,ref:function(e){return v.push(e)},onKeyDown:_,onFocus:C,onClick:C},n)}))),t?(0,i.cloneElement)(w.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},w.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}},79443:(e,t,n)=>{n.d(t,{Z:()=>i});const i=(0,n(67294).createContext)(void 0)},28861:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>r,contentTitle:()=>d,metadata:()=>s,toc:()=>m,default:()=>c});var i=n(87462),a=n(63366),o=(n(67294),n(3905)),l=n(44996),r=(n(55064),n(58215),{id:"flexbox-yoga",title:"Layout System with Flexbox",hide_table_of_contents:!0}),d=void 0,s={unversionedId:"mainconcepts/uicomposition/flexbox-yoga",id:"mainconcepts/uicomposition/flexbox-yoga",isDocsHomePage:!1,title:"Layout System with Flexbox",description:"Litho uses Yoga library which is an implementation of Flexbox to measure and layout components on screen. If you have used Flexbox on the web before this should be very familiar. If you are more familiar with how Android normally performs Layout then Flexbox will remind you a lot of LinearLayout.",source:"@site/../docs/mainconcepts/uicomposition/flexbox-yoga.mdx",sourceDirName:"mainconcepts/uicomposition",slug:"/mainconcepts/uicomposition/flexbox-yoga",permalink:"/docs/mainconcepts/uicomposition/flexbox-yoga",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/uicomposition/flexbox-yoga.mdx",version:"current",frontMatter:{id:"flexbox-yoga",title:"Layout System with Flexbox",hide_table_of_contents:!0},sidebar:"mainSidebar",previous:{title:"Mount Specs",permalink:"/docs/mainconcepts/uicomposition/mount-specs"},next:{title:"State Overview",permalink:"/docs/mainconcepts/coordinate-state-actions/state-overview"}},m=[{value:"Flexbox Attributes",id:"flexbox-attributes",children:[{value:"Layout Direction",id:"layout-direction",children:[]},{value:"Distribution Along Main Axis",id:"distribution-along-main-axis",children:[]},{value:"Distribution Along Cross Axis",id:"distribution-along-cross-axis",children:[]},{value:"Wrapping to Multiple Lines",id:"wrapping-to-multiple-lines",children:[]},{value:"Line Distribution",id:"line-distribution",children:[]}]},{value:"Yoga Playground",id:"yoga-playground",children:[]},{value:"Android Views vs. Litho with Yoga",id:"android-views-vs-litho-with-yoga",children:[]}],u={toc:m};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.mdx)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Litho uses ",(0,o.mdx)("a",{parentName:"p",href:"https://yogalayout.com/"},"Yoga")," library which is an implementation of ",(0,o.mdx)("a",{parentName:"p",href:"https://www.w3.org/TR/css-flexbox-1/"},"Flexbox")," to measure and layout components on screen. If you have used Flexbox on the web before this should be very familiar. If you are more familiar with how Android normally performs Layout then Flexbox will remind you a lot of ",(0,o.mdx)("inlineCode",{parentName:"p"},"LinearLayout"),"."),(0,o.mdx)("h2",{id:"flexbox-attributes"},"Flexbox Attributes"),(0,o.mdx)("p",null,"Here you will see various attributes of FlexBox and how that applies to layout."),(0,o.mdx)("h3",{id:"layout-direction"},"Layout Direction"),(0,o.mdx)("p",null,"Flexbox is a ",(0,o.mdx)("strong",{parentName:"p"},"one dimensional layout model"),". This means that all elements are placed along one line. The first question is - should your elements be laid out horizontally, or vertically? The primary axis of layout is called the ",(0,o.mdx)("strong",{parentName:"p"},"main axis"),", and the direction perpendicular to it is called the ",(0,o.mdx)("strong",{parentName:"p"},"cross axis"),". For example, if you wanted your children to be laid out left to right, then the main axis would be the horizontal axis, and the cross axis would be the vertical axis."),(0,o.mdx)("p",null,"Litho uses special container components to define direction of the layout:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Row")," - The main axis is horizontal, and child elements are laid out left to right. If wrapping is enabled, then the next line will start under the first item on the left of the container."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Row (reverse)")," - The main axis is horizontal and elements are laid out right to left. If wrapping is enabled, then the next line will start under the first item on the right of the container."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Column")," - The main axis is vertical and child elements are laid out top to bottom. If wrapping is enabled, then the next line will start to the right of the first item on the top of the container."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Column (reverse)")," - The main axis is vertical and elements are laid out bottom to top. If wrapping is enabled, then the next line will start to the right of the first item on the bottom of the container.")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"(reverse)")," option is available through ",(0,o.mdx)("inlineCode",{parentName:"p"},".reverse(boolean)")," method on ",(0,o.mdx)("inlineCode",{parentName:"p"},"Row"),"/",(0,o.mdx)("inlineCode",{parentName:"p"},"Column")," objects."),(0,o.mdx)("img",{src:(0,l.default)("/images/litho-layout-flex-direction.png"),alt:"flex-direction"}),(0,o.mdx)("h3",{id:"distribution-along-main-axis"},"Distribution Along Main Axis"),(0,o.mdx)("p",null,"What happens if your container has more space than is necessary along the ",(0,o.mdx)("strong",{parentName:"p"},"main")," axis? How do you position the children across that axis? The ",(0,o.mdx)("inlineCode",{parentName:"p"},"justifyContent")," method specifies how the child elements are distributed across the main axis. It takes a ",(0,o.mdx)("inlineCode",{parentName:"p"},"YogaJustify")," enum input and has the following possible values:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"FLEX_START")," ",(0,o.mdx)("em",{parentName:"li"},"(default)")," - Place children at the start of the container along the main axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"FLEX_END")," - Place children at the end of the container along the main axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"CENTER")," - Place children in the center of the container along the main axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"SPACE_BETWEEN")," - Distribute extra space evenly between children."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"SPACE_AROUND"),' - Distribute space evenly around each child. Note that adjacent children will have 2x space between them (because each child has its own "padding").'),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"SPACE_EVENLY")," - Distribute space evenly around all children.")),(0,o.mdx)("img",{src:(0,l.default)("/images/litho-layout-justify-content.png"),alt:"justify-content"}),(0,o.mdx)("h3",{id:"distribution-along-cross-axis"},"Distribution Along Cross Axis"),(0,o.mdx)("p",null,"What happens if the elements in your line are different heights? How do you position them along in the line? The ",(0,o.mdx)("inlineCode",{parentName:"p"},"alignItems")," method specifies how the container's children are distributed across the ",(0,o.mdx)("strong",{parentName:"p"},"cross axis"),". It takes a ",(0,o.mdx)("inlineCode",{parentName:"p"},"YogaAlign")," enum input and has the following possible values:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"STRETCH")," ",(0,o.mdx)("em",{parentName:"li"},"(default)")," - Stretch the size of all elements to completely fill the line."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"FLEX_START")," - Align elements with the start of the cross axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"FLEX_END")," - Align elements with the end of the cross axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"CENTER")," - Align elements with the center of the line."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"BASELINE")," - Align elements with respect to their baselines.")),(0,o.mdx)("img",{src:(0,l.default)("/images/litho-layout-align-items.png"),alt:"align-items"}),(0,o.mdx)("h3",{id:"wrapping-to-multiple-lines"},"Wrapping to Multiple Lines"),(0,o.mdx)("p",null,"We said before that flexbox is a one dimensional layout model, and it lays out its children in one line. This is only mostly true. Flexboxes can also wrap their children onto multiple lines, much like text wraps. You specify wrapping behavior with the ",(0,o.mdx)("inlineCode",{parentName:"p"},"wrap")," method. This method takes a ",(0,o.mdx)("inlineCode",{parentName:"p"},"YogaWrap")," enum value and has 3 possible values:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"NO_WRAP")," ",(0,o.mdx)("em",{parentName:"li"},"(default)")," - There is no wrapping. Children are forced into a single line. If they cannot fit they will overflow."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"WRAP")," - Elements that overflow a single line will be moved to the next line. For example, if the main axis is horizontal, then the next line will be ",(0,o.mdx)("strong",{parentName:"li"},"below")," the previous line."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"WRAP_REVERSE")," - Similar to ",(0,o.mdx)("inlineCode",{parentName:"li"},"WRAP")," except the order of lines is reversed. For example, if the main axis is horizontal, then the next line will be ",(0,o.mdx)("strong",{parentName:"li"},"above")," the previous line.")),(0,o.mdx)("img",{src:(0,l.default)("/images/litho-layout-wrap.png"),alt:"wrap"}),(0,o.mdx)("h3",{id:"line-distribution"},"Line Distribution"),(0,o.mdx)("p",null,"When using ",(0,o.mdx)("inlineCode",{parentName:"p"},"WRAP")," (or ",(0,o.mdx)("inlineCode",{parentName:"p"},"WRAP_REVERSE"),") for ",(0,o.mdx)("inlineCode",{parentName:"p"},"wrap")," method, suddenly we find ourselves with multiple lines. If our container has extra space in the cross axis direction, how do we distribute the lines in that space? We use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"alignContent")," method to define how the lines are distributed along the cross axis. This attribute takes a ",(0,o.mdx)("inlineCode",{parentName:"p"},"YogaAlign")," enum value and has the following possible values:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"STRETCH")," ",(0,o.mdx)("em",{parentName:"li"},"(default)")," - Lines are stretched evenly to fill the available space in the cross axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"FLEX_START")," - Lines are placed at the start of the cross axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"FLEX_END")," - Lines are placed at the end of the cross axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"CENTER")," - Lines are placed in the center of the cross axis."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"SPACE_BETWEEN")," - Evenly distribute extra space between all lines."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"SPACE_AROUND")," - Pad lines above and below with the extra space.")),(0,o.mdx)("img",{src:(0,l.default)("/images/litho-layout-align-content.png"),alt:"align-content"}),(0,o.mdx)("p",null,"For more documentation of specific Flexbox properties check out the ",(0,o.mdx)("a",{parentName:"p",href:"https://yogalayout.com/docs/"},"Yoga documentation")," or explore any web resources on how Flexbox works."),(0,o.mdx)("h2",{id:"yoga-playground"},"Yoga Playground"),(0,o.mdx)("p",null,"You can also use the ",(0,o.mdx)("a",{parentName:"p",href:"https://yogalayout.com/playground"},"Yoga Playground")," to try different layout configurations and generate corresponding Litho code."),(0,o.mdx)("img",{src:(0,l.default)("/images/yoga-playground.png"),alt:"Yoga Playground",className:"white-background"}),(0,o.mdx)("h2",{id:"android-views-vs-litho-with-yoga"},"Android Views vs. Litho with Yoga"),(0,o.mdx)("p",null,"Let's look at typical layout configurations in Android and how they translate to Litho with Yoga."),(0,o.mdx)("h4",{id:"vertically-stacked-items"},"Vertically stacked items."),(0,o.mdx)("table",null,(0,o.mdx)("tr",null,(0,o.mdx)("th",null,"Android Views"),(0,o.mdx)("th",null,"Litho with Yoga")),(0,o.mdx)("tr",null,(0,o.mdx)("td",null,(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<LinearLayout\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:orientation="vertical">\n    <TextView\n        android:id="@+id/text1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Text 1" />\n    <TextView\n        android:id="@+id/text2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Text 2" />\n</LinearLayout>\n'))),(0,o.mdx)("td",null,(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'Column.create(c)\n    .child(\n        Text.create(c)\n            .text("Text 1"))\n    .child(\n        Text.create(c)\n            .text("Text 2"))\n    .build();\n'))))),(0,o.mdx)("h4",{id:"two-items-equally-stretched-horizontally"},"Two items equally stretched horizontally."),(0,o.mdx)("p",null,"To achieve an effect similar to a ",(0,o.mdx)("inlineCode",{parentName:"p"},"LinearLayout")," with weights Flexbox provides a concept called ",(0,o.mdx)("inlineCode",{parentName:"p"},"flexGrow(<weight>)"),"."),(0,o.mdx)("table",null,(0,o.mdx)("tr",null,(0,o.mdx)("th",null,"Android Views"),(0,o.mdx)("th",null,"Litho with Yoga")),(0,o.mdx)("tr",null,(0,o.mdx)("td",null,(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<LinearLayout\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:orientation="horizontal">\n    <View\n        android:layout_width="0dp"\n        android:layout_height="match_parent"\n        android:backgroundColor="@color/red"\n        android:layout_weight="1"/>\n    <View\n        android:layout_width="0dp"\n        android:layout_height="match_parent"\n        android:backgroundColor="@color/blue"\n        android:layout_weight="1"/>\n</LinearLayout>\n'))),(0,o.mdx)("td",null,(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Row.create(c)\n    .child(\n        SolidColor.create(c)\n            .color(RED)\n            .flexGrow(1))\n    .child(\n        SolidColor.create(c)\n            .color(BLUE)\n            .flexGrow(1))\n    .build();\n"))))),(0,o.mdx)("h4",{id:"absolutely-positioned-items"},"Absolutely positioned items"),(0,o.mdx)("p",null,"If you would like to overlay one view on top of the other similar to a ",(0,o.mdx)("inlineCode",{parentName:"p"},"FrameLayout"),", Flexbox can do that with ",(0,o.mdx)("inlineCode",{parentName:"p"},"positionType(ABSOLUTE)"),"."),(0,o.mdx)("table",null,(0,o.mdx)("tr",null,(0,o.mdx)("th",null,"Android Views"),(0,o.mdx)("th",null,"Litho with Yoga")),(0,o.mdx)("tr",null,(0,o.mdx)("td",null,(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<FrameLayout\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n    <ImageView\n        android:layout_width="100dp"\n        android:layout_height="100dp"\n        android:src="@drawable/some_big_image"/>\n    <TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Overlaid text"/>\n</FrameLayout>\n'))),(0,o.mdx)("td",null,(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'Column.create(c)\n    .child(\n        Image.create(c)\n            .drawableRes(R.drawable.some_big_image)\n            .widthDip(100)\n            .heightDip(100))\n    .child(\n        Text.create(c)\n            .text("Overlaid text")\n            .positionType(ABSOLUTE))\n    .build();\n'))))))}c.isMDXComponent=!0},86010:(e,t,n)=>{function i(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=i(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}function a(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=i(e))&&(a&&(a+=" "),a+=t);return a}n.r(t),n.d(t,{default:()=>a})}}]);