"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4828],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>m,MDXProvider:()=>d,mdx:()=>y,useMDXComponents:()=>p,withMDXComponents:()=>c});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=o.createContext({}),c=function(e){return function(t){var n=p(t.components);return o.createElement(e,i({},t,{components:n}))}},p=function(e){var t=o.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(a,".").concat(d)]||c[d]||u[d]||i;return n?o.createElement(h,s(s({ref:t},m),{},{components:n})):o.createElement(h,s({ref:t},m))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var m=2;m<i;m++)a[m]=n[m];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},98594:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>m,toc:()=>c,default:()=>d});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),a=["components"],s={id:"motivation",title:"Motivation"},l=void 0,m={unversionedId:"intro/motivation",id:"intro/motivation",isDocsHomePage:!1,title:"Motivation",description:"This page was moved from the old website without any change and might be updated",source:"@site/../docs/intro/motivation.md",sourceDirName:"intro",slug:"/intro/motivation",permalink:"/docs/intro/motivation",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/intro/motivation.md",tags:[],version:"current",frontMatter:{id:"motivation",title:"Motivation"},sidebar:"mainSidebar",next:{title:"Built with Litho",permalink:"/docs/intro/built-with-litho"}},c=[],p={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.mdx)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Content will be updated")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},"This page was moved from the old website without any change and might be updated"))),(0,i.mdx)("p",null,"Building a list interface on Android is fairly simple. Just create a layout for\nthe items, hook it up to a ",(0,i.mdx)("em",{parentName:"p"},"RecyclerView")," adapter, and you're done. Most apps\nare a bit more complicated than that, though."),(0,i.mdx)("p",null,"If your adapter has more than a few view types, you'll have to think about more\nrobust ways to recycle views. If you have too many view types, ",(0,i.mdx)("em",{parentName:"p"},"RecyclerView"),"\nwill be constantly inflating new views every time a new type is displayed,\nwhich is likely to cause frame drops while scrolling."),(0,i.mdx)("p",null,"You can minimise the number of view types by recycling the same view instances\nfor multiple variations within items in ",(0,i.mdx)("em",{parentName:"p"},"RecyclerView")," but this usually results\nin a solution that will get increasingly more prone to bugs as you add more\nfeatures to your product."),(0,i.mdx)("p",null,"If the list items are complex, chances are that you'll have to optimize your\nlayouts. For simpler cases, you can get good performance by simply avoiding\nsome gotchas from Android's stock layouts but this is not always the case. A\ncommon approach is to implement custom views especially tailored for your use\ncases. Custom views are great for UI efficiency but tend to slow you down due\nto the added complexity and higher maintenance cost."),(0,i.mdx)("p",null,"You can also optimize complex items in ",(0,i.mdx)("em",{parentName:"p"},"RecyclerView")," by breaking them down\ninto separate items in the adapter to better spread the time spent on layout\nand drawing per frame while scrolling. This approach can work well in some\ncases but it might still require investment in custom views and usually leads\nto an explosion in view types in the adapter, leading to the problems we\ndescribed above."),(0,i.mdx)("p",null,"Litho was primarily built to encapsulate the complexity of implementing\nefficient ",(0,i.mdx)("em",{parentName:"p"},"RecyclerViews"),". With Litho, there are no view types and you build\nuser interfaces that can seamlessly compute layout ahead of time in a\nbackground thread and render much flatter view hierarchies automatically. And\nthey get all of these fancy features for free behind a much simpler programming\nmodel!"))}d.isMDXComponent=!0}}]);