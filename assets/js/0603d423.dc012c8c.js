"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9887],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>c});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),c=function(e){return function(n){var t=p(n.components);return a.createElement(e,i({},n,{components:t}))}},p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=h;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},13919:(e,n,t)=>{function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!a(e)}t.d(n,{b:()=>a,Z:()=>o})},44996:(e,n,t)=>{t.r(n),t.d(n,{useBaseUrlUtils:()=>i,default:()=>l});var a=t(52263),o=t(13919);function i(){var e=(0,a.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,i=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,a){var i=void 0===a?{}:a,l=i.forcePrependBaseUrl,r=void 0!==l&&l,s=i.absolute,d=void 0!==s&&s;if(!t)return t;if(t.startsWith("#"))return t;if((0,o.b)(t))return t;if(r)return n+t;var c=t.startsWith(n)?t:n+t.replace(/^\//,"");return d?e+c:c}(i,t,e,n)}}}function l(e,n){return void 0===n&&(n={}),(0,i().withBaseUrl)(e,n)}},6426:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>s,contentTitle:()=>d,metadata:()=>c,toc:()=>p,default:()=>u});var a=t(87462),o=t(63366),i=(t(67294),t(3905)),l=t(44996),r=["components"],s={id:"collections",title:"Lazy Collections"},d=void 0,c={unversionedId:"kotlin/collections",id:"kotlin/collections",isDocsHomePage:!1,title:"Lazy Collections",description:"A lazy collection is a Component that can efficiently render a scrollable list of child Components using Android's RecyclerView. Lazy collections are available as LazyList, LazyGrid or LazyStaggeredGrid.",source:"@site/../docs/kotlin/collections.mdx",sourceDirName:"kotlin",slug:"/kotlin/collections",permalink:"/docs/kotlin/collections",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/collections.mdx",tags:[],version:"current",frontMatter:{id:"collections",title:"Lazy Collections"}},p=[{value:"Creating a Scrollable List",id:"creating-a-scrollable-list",children:[],level:2},{value:"Updates",id:"updates",children:[],level:2},{value:"Pagination",id:"pagination",children:[],level:2},{value:"Pull to Refresh",id:"pull-to-refresh",children:[],level:2},{value:"Configuration options",id:"configuration-options",children:[],level:2}],m={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.mdx)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"A lazy collection is a Component that can efficiently render a scrollable list of child ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component"),"s using Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),". Lazy collections are available as ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyGrid")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyStaggeredGrid"),"."),(0,i.mdx)("h2",{id:"creating-a-scrollable-list"},"Creating a Scrollable List"),(0,i.mdx)("p",null,"Consider the following example data representing the response from a server request."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_original_data_example end=end_original_data_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_original_data_example",end:"end_original_data_example"},'data class Person(val name: String, val id: Int)\n\nval friends =\n    listOf(\n        Person("Ross Geller", 1),\n        Person("Monica Geller", 2),\n        Person("Rachel Green", 3),\n        Person("Phoebe Buffay", 4),\n        Person("Joey Tribbiani", 5),\n        Person("Chandler Bing", 6),\n    )\n')),(0,i.mdx)("p",null,"To render this data in a ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList"),", you can use the following:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_example",end:"end_example"},'class FriendList(val friends: List<Person>) : KComponent() {\n\n  override fun ComponentScope.render(): Component = LazyList {\n    child(Text(text = "Friends", textStyle = Typeface.BOLD))\n    friends.forEach { (name, id) -> child(id = id, component = Text(name)) }\n  }\n}\n')),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList")," is the container for the scrollable area, it should be sized to fit the area you require as it will not grow to fit its contents by default. In this case, it is a root component so it will automatically match the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LithoView"),"'s size."),(0,i.mdx)("p",null,"Items are added to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList")," using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"child()")," function. For each child, you provide the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," to be displayed. First, add a title as a child. Next, loop through the list and add each list item as a child. For each of the list items, include an ",(0,i.mdx)("inlineCode",{parentName:"p"},"id"),", which is used for applying list updates."),(0,i.mdx)("h2",{id:"updates"},"Updates"),(0,i.mdx)("p",null,"When a list is updated, items may have changed position or have been added/removed. There needs to be a method to identify each item so that rows maintain the right state across updates, as well as to animate changes. This identity is provided by an ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," parameter to each child."),(0,i.mdx)("p",null,"In the following example data, Ross has been removed, Janice has been added, and the whole list has been sorted alphabetically. Since all of the IDs have remained the same, it's possible to automatically detect all the changes and apply the list updates."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_modified_data_example end=end_modified_data_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_modified_data_example",end:"end_modified_data_example"},'val friends_added_removed_sorted =\n    listOf(\n        Person("Chandler Bing", 6),\n        Person("Janice Hosenstein", 7),\n        Person("Joey Tribbiani", 5),\n        Person("Monica Geller", 2),\n        Person("Phoebe Buffay", 4),\n        Person("Rachel Green", 3),\n    )\n')),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/update_data.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("p",null,"When an item's contents are updated, the change is automatically detected and animated using the parameter 'id'. For example, if the item ",(0,i.mdx)("inlineCode",{parentName:"p"},'Person("Monica Geller", 2)')," is updated to ",(0,i.mdx)("inlineCode",{parentName:"p"},'Person("Monica Geller-Bing", 2)'),", the change is identified using id:2. The name change is detected (Geller to Geller-Bing) from a comparison of all the props used by that item."),(0,i.mdx)("h2",{id:"pagination"},"Pagination"),(0,i.mdx)("p",null,"Lists of data are often retrieved from the server in pages; additional data is requested only if the user scrolls. ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyCollection")," has an API for working with paginated lists."),(0,i.mdx)("p",null,"First, use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"tailPagination")," helper to create a pagination handler lambda and assign it to the LazyCollection's ",(0,i.mdx)("inlineCode",{parentName:"p"},"pagination")," parameter. The 'handler' is used for fetching the next page of data."),(0,i.mdx)("p",null,"Next, provide a visual indicator to the user that a request is in progress by directly adding a progress spinner as a child to the end of the LazyCollection. The following code provides an example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/PaginationCollectionKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/PaginationCollectionKComponent.kt",start:"start_example",end:"end_example"},'class PaginationCollectionKComponent : KComponent() {\n\n  override fun ComponentScope.render(): Component {\n    val paginatedData = useCached { PaginatedDataSource(pageSize = 40) }\n    val list = useState { paginatedData.next() }\n\n    return LazyList(\n        pagination =\n            tailPagination(offsetBeforeTailFetch = 10) {\n              paginatedData.fetchDelayed { newData -> list.update { it + newData } }\n            },\n    ) {\n      list.value.forEach { child(id = it, component = Text("$it")) }\n\n      if (paginatedData.hasNext) {\n        child(\n            Column(alignItems = YogaAlign.CENTER) {\n              child(component = Progress(style = Style.height(50.dp).height(50.dp)))\n            })\n      }\n    }\n  }\n}\n')),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/pagination.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h2",{id:"pull-to-refresh"},"Pull to Refresh"),(0,i.mdx)("p",null,"To implement 'pull to refresh' behaviour, provide a lambda to ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList"),"'s ",(0,i.mdx)("inlineCode",{parentName:"p"},"onPullToRefresh")," parameter. This can then trigger your refresh logic, for events such as fetching new data."),(0,i.mdx)("p",null,"To dismiss the refreshing indicator use ",(0,i.mdx)("inlineCode",{parentName:"p"},"Collection.clearRefreshing(context, collectionHandle)"),". This requires a ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/coordinate-state-actions/trigger-events"},(0,i.mdx)("inlineCode",{parentName:"a"},"Handle"))," to be specified on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/PullToRefreshCollectionKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/PullToRefreshCollectionKComponent.kt",start:"start_example",end:"end_example"},"class PullToRefreshCollectionKComponent : KComponent() {\n\n  override fun ComponentScope.render(): Component {\n    val deck = useState { (0..51).map { Card(it) }.shuffled() }\n    val lazyListHandle = Handle()\n    return LazyList(\n        handle = lazyListHandle,\n        style = Style.flex(grow = 1f),\n        onPullToRefresh = {\n          deck.update { it.shuffled() }\n          Collection.clearRefreshing(context, lazyListHandle)\n        },\n    ) { deck.value.forEach { card -> child(id = card.index, component = Text(card.styledText)) } }\n  }\n}\n")),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/pull_to_refresh.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h2",{id:"configuration-options"},"Configuration options"),(0,i.mdx)("p",null,"A ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList"),"s are rendered using a ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),". You can configure the underlying ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView")," using ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList"),"'s props."),(0,i.mdx)("p",null,"The following example specifies ",(0,i.mdx)("inlineCode",{parentName:"p"},"orientation = RecyclerView.HORIZONTAL")," which sets the orientation to horizontal, then configures ",(0,i.mdx)("inlineCode",{parentName:"p"},"itemDecoration")," to apply custom spacing around each item:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/HorizontalScrollKComponent.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/HorizontalScrollKComponent.kt",start:"start_example",end:"end_example"},'class FixedHeightHScroll : KComponent() {\n\n  override fun ComponentScope.render(): Component =\n      LazyList(\n          orientation = RecyclerView.HORIZONTAL,\n          itemDecoration = LinearSpacing(all = 10.dp),\n          style = Style.height(100.dp),\n      ) { (0..10).forEach { child(id = it, component = ListItem("$it")) } }\n}\n')),(0,i.mdx)("p",null,"For all configuration options, see the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyList.kt"},(0,i.mdx)("inlineCode",{parentName:"a"},"LazyList")," class"),"."))}u.isMDXComponent=!0}}]);