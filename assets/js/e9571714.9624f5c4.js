"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8330],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>s});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){return function(n){var t=m(n.components);return r.createElement(e,o({},n,{components:t}))}},m=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},x=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=m(t),c=i,x=s["".concat(l,".").concat(c)]||s[c]||u[c]||o;return t?r.createElement(x,a(a({ref:n},p),{},{components:t})):r.createElement(x,a({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=x;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}x.displayName="MDXCreateElement"},97497:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>a,contentTitle:()=>d,metadata:()=>p,toc:()=>s,default:()=>c});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),l=["components"],a={id:"builtin-widgets",title:"Built-in widgets"},d=void 0,p={unversionedId:"widgets/builtin-widgets",id:"widgets/builtin-widgets",isDocsHomePage:!1,title:"Built-in widgets",description:"Litho provides a number of built-in components. You can find the full list of components and APIs within the javadocs for the com.facebook.litho.widget package.  This page covers the most basic built-in widgets.",source:"@site/../docs/widgets/builtin-widgets.mdx",sourceDirName:"widgets",slug:"/widgets/builtin-widgets",permalink:"/docs/widgets/builtin-widgets",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/widgets/builtin-widgets.mdx",tags:[],version:"current",frontMatter:{id:"builtin-widgets",title:"Built-in widgets"},sidebar:"mainSidebar",previous:{title:"Interactions",permalink:"/docs/kotlin/testing-actions"},next:{title:"Migration Strategies",permalink:"/docs/kotlin/migration-strategies"}},s=[{value:"Text",id:"text",children:[{value:"Required Props",id:"required-props",children:[],level:3},{value:"Usage",id:"usage",children:[],level:3}],level:2},{value:"TextInput",id:"textinput",children:[{value:"Required Props",id:"required-props-1",children:[],level:3},{value:"Usage",id:"usage-1",children:[],level:3}],level:2},{value:"Image",id:"image",children:[{value:"Required Props",id:"required-props-2",children:[],level:3},{value:"Usage",id:"usage-2",children:[],level:3}],level:2},{value:"Card",id:"card",children:[{value:"Required Props",id:"required-props-3",children:[],level:3},{value:"Usage",id:"usage-3",children:[],level:3}],level:2},{value:"SolidColor",id:"solidcolor",children:[{value:"Required Props",id:"required-props-4",children:[],level:3},{value:"Usage",id:"usage-4",children:[],level:3}],level:2},{value:"Progress",id:"progress",children:[{value:"Required Props",id:"required-props-5",children:[{value:"Usage",id:"usage-5",children:[],level:4}],level:3}],level:2},{value:"Spinner",id:"spinner",children:[{value:"Required Props",id:"required-props-6",children:[],level:5},{value:"Usage",id:"usage-6",children:[],level:3}],level:2},{value:"VerticalScroll",id:"verticalscroll",children:[{value:"Required Props",id:"required-props-7",children:[],level:3},{value:"Usage",id:"usage-7",children:[],level:3}],level:2},{value:"HorizontalScroll",id:"horizontalscroll",children:[{value:"Required Props",id:"required-props-8",children:[],level:3},{value:"Usage",id:"usage-8",children:[],level:3}],level:2},{value:"Recycler",id:"recycler",children:[],level:2}],m={toc:s};function c(e){var n=e.components,t=(0,i.Z)(e,l);return(0,o.mdx)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Litho provides a number of built-in components. You can find the full list of components and APIs within the ",(0,o.mdx)("a",{parentName:"p",href:"pathname:///javadoc/index.html?com/facebook/litho/widget/package-summary.html"},"javadocs for the com.facebook.litho.widget package"),".  This page covers the most basic built-in widgets."),(0,o.mdx)("h2",{id:"text"},"Text"),(0,o.mdx)("p",null,"This is the most basic Litho component to show simple text: it's the equivalent of an Android ",(0,o.mdx)("inlineCode",{parentName:"p"},"TextView")," within Litho."),(0,o.mdx)("h3",{id:"required-props"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"CharSequence text")," - text to display.")),(0,o.mdx)("h3",{id:"usage"},"Usage"),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"Text")," has numerous optional props you can use to style your text, just as with ",(0,o.mdx)("inlineCode",{parentName:"p"},"TextView")," since both use ",(0,o.mdx)("inlineCode",{parentName:"p"},"android.text.Layout")," under the hood."),(0,o.mdx)("p",null,"A full list of the optional props is available in the ",(0,o.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/Text.html"},"javadocs"),"."),(0,o.mdx)("p",null,"Most props directly accept resources ids too:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'final Component component =\n    Text.create(c)\n        .text("This is my example text")\n        .textSizeRes(R.dimen.my_text_size)\n        .textColorRes(R.color.my_text_color)\n        .textAlignment(Layout.Alignment.ALIGN_CENTER)\n        .build();\n')),(0,o.mdx)("h2",{id:"textinput"},"TextInput"),(0,o.mdx)("p",null,"Component that renders an editable text input using an Android ",(0,o.mdx)("inlineCode",{parentName:"p"},"EditText"),"."),(0,o.mdx)("h3",{id:"required-props-1"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"None.")),(0,o.mdx)("h3",{id:"usage-1"},"Usage"),(0,o.mdx)("p",null,"As this component is backed by Android's ",(0,o.mdx)("inlineCode",{parentName:"p"},"EditText"),", many native capabilities are applicable:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Use an ",(0,o.mdx)("inlineCode",{parentName:"li"},"android.text.InputFilter ")," to set a text length limit or modify text input."),(0,o.mdx)("li",{parentName:"ul"},"Change the input representation by passing an ",(0,o.mdx)("inlineCode",{parentName:"li"},"android.text.InputType")," constant."),(0,o.mdx)("li",{parentName:"ul"},"For performance reasons, avoid re-creating the Component with different props to change its configuration. Instead, you can use Event triggers ",(0,o.mdx)("inlineCode",{parentName:"li"},"OnTrigger")," to update text, request view focus or set selection. For example, ",(0,o.mdx)("inlineCode",{parentName:"li"},'TextInput.setText(c, "myTextInputKey", "myText")'),".")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"private static final InputFilter lenFilter = new InputFilter.LengthFilter(maxLength);\nComponent component =\n    TextInput.create(c)\n        .initialText(text)\n        .textColorStateList(ColorStateList.valueOf(color))\n        .multiline(true)\n        .inputFilter(lenFilter)\n        .backgroundColor(Color.TRANSPARENT)\n        .inputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES)\n        .build();\n")),(0,o.mdx)("h2",{id:"image"},"Image"),(0,o.mdx)("p",null,"A component that displays a drawable."),(0,o.mdx)("h3",{id:"required-props-2"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Drawable drawable")," - drawable to display.")),(0,o.mdx)("h3",{id:"usage-2"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    Image.create(c)\n        .drawableRes(R.drawable.my_drawable)\n        .scaleType(ImageView.ScaleType.CENTER_CROP)\n        .build();\n")),(0,o.mdx)("h2",{id:"card"},"Card"),(0,o.mdx)("p",null,"The Litho equivalent of an Android ",(0,o.mdx)("inlineCode",{parentName:"p"},"CardView"),". ",(0,o.mdx)("inlineCode",{parentName:"p"},"Card")," applies borders with shadows/elevation to a given component.\nIf your card is rendered on top of a dynamically coloured background that cannot be 'faked' using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Card")," component, use the less performant prop ",(0,o.mdx)("inlineCode",{parentName:"p"},"transparencyEnabled(true)"),"."),(0,o.mdx)("h3",{id:"required-props-3"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Component content")," - the component to decorate.")),(0,o.mdx)("h3",{id:"usage-3"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    Card.create(c)\n        .content(myContentComponent)\n        .clippingColorRes(R.color.my_clipping_color)\n        .cornerRadiusDip(8)\n        .build();\n")),(0,o.mdx)("h2",{id:"solidcolor"},"SolidColor"),(0,o.mdx)("p",null,"A simple Component to render solid colour."),(0,o.mdx)("h3",{id:"required-props-4"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"int color")," - colour to display.")),(0,o.mdx)("h3",{id:"usage-4"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    SolidColor.create(c)\n        .color(Color.RED)\n        .alpha(0.5)\n        .build();\n")),(0,o.mdx)("h2",{id:"progress"},"Progress"),(0,o.mdx)("p",null,"Renders an infinitely spinning progress bar backed by the Android's ",(0,o.mdx)("inlineCode",{parentName:"p"},"ProgressBar"),"."),(0,o.mdx)("h3",{id:"required-props-5"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"None.")),(0,o.mdx)("h4",{id:"usage-5"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      Progress.create(c)\n        .indeterminateDrawableRes(R.drawable.my_loading_spinner)\n        .build();\n")),(0,o.mdx)("h2",{id:"spinner"},"Spinner"),(0,o.mdx)("p",null,"A simple spinner (dropdown) component. Derived from the standard Android ",(0,o.mdx)("inlineCode",{parentName:"p"},"Spinner"),"."),(0,o.mdx)("h5",{id:"required-props-6"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"List<String> options"),": List of possible options to select from."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"String selectedOption"),": Currently selected option.")),(0,o.mdx)("h3",{id:"usage-6"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"List<String> myOptions = ...\nComponent component =\n      Spinner.create(c)\n        .options(myOptions)\n        .selectedOption(myOptions.get(0))\n        .build();\n")),(0,o.mdx)("h2",{id:"verticalscroll"},"VerticalScroll"),(0,o.mdx)("p",null,"A Component that wraps another component, allowing it to be vertically scrollable. It's analogous to Android's ",(0,o.mdx)("inlineCode",{parentName:"p"},"ScrollView"),"."),(0,o.mdx)("h3",{id:"required-props-7"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Component childComponent")," - a component to vertically scroll.")),(0,o.mdx)("h3",{id:"usage-7"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      VerticalScroll.create(c)\n        .childComponent(myComponentToScroll)\n        .verticalFadingEdgeEnabled(true)\n        .fadingEdgeLengthDip(FADING_EDGE_LENGTH_DP)\n        .build();\n")),(0,o.mdx)("h2",{id:"horizontalscroll"},"HorizontalScroll"),(0,o.mdx)("p",null,"Component that wraps another component, allowing it to be horizontally scrollable. It's analogous to Android's ",(0,o.mdx)("inlineCode",{parentName:"p"},"HorizontalScrollView"),"."),(0,o.mdx)("h3",{id:"required-props-8"},"Required Props"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"Component contentProps")," - a Component to horizontally scroll.")),(0,o.mdx)("h3",{id:"usage-8"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      HorizontalScroll.create(c)\n        .contentProps(myComponentToScroll)\n        .build();\n")),(0,o.mdx)("h2",{id:"recycler"},"Recycler"),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," is the equivalent of Android's ",(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),". It's recommended that you use ",(0,o.mdx)("a",{parentName:"p",href:"/docs/sections/start"},"Sections")," for efficient list rendering, which uses ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," under the hood."),(0,o.mdx)("p",null,"If you  want to use ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," directly, see the ",(0,o.mdx)("a",{parentName:"p",href:"/docs/sections/recycler-collection-component"},"Adding and adapting the RecyclerCollection to your app")," page of the litho documentation."))}c.isMDXComponent=!0}}]);