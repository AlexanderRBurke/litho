"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[279],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>d,withMDXComponents:()=>s});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){return function(n){var t=d(n.components);return a.createElement(e,o({},n,{components:t}))}},d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=d(t),c=i,h=s["".concat(r,".").concat(c)]||s[c]||u[c]||o;return t?a.createElement(h,m(m({ref:n},l),{},{components:t})):a.createElement(h,m({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=h;var m={};for(var p in n)hasOwnProperty.call(n,p)&&(m[p]=n[p]);m.originalType=e,m.mdxType="string"==typeof e?e:i,r[1]=m;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},13919:(e,n,t)=>{function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}t.d(n,{b:()=>a,Z:()=>i})},44996:(e,n,t)=>{t.r(n),t.d(n,{useBaseUrlUtils:()=>o,default:()=>r});var a=t(52263),i=t(13919);function o(){var e=(0,a.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,o=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,a){var o=void 0===a?{}:a,r=o.forcePrependBaseUrl,m=void 0!==r&&r,p=o.absolute,l=void 0!==p&&p;if(!t)return t;if(t.startsWith("#"))return t;if((0,i.b)(t))return t;if(m)return n+t;var s=t.startsWith(n)?t:n+t.replace(/^\//,"");return l?e+s:s}(o,t,e,n)}}}function r(e,n){return void 0===n&&(n={}),(0,o().withBaseUrl)(e,n)}},51981:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>m,contentTitle:()=>p,metadata:()=>l,toc:()=>s,default:()=>c});var a=t(87462),i=t(63366),o=(t(67294),t(3905)),r=t(44996),m={id:"transition-types",title:"Types of Transitions"},p=void 0,l={unversionedId:"animations/transition-types",id:"animations/transition-types",isDocsHomePage:!1,title:"Types of Transitions",description:"Litho APIs allow you to create animated transitions between two consecutive states of the UI - LayoutStates. We'll be addressing these states as before and after respectively.",source:"@site/../docs/animations/transition-types.mdx",sourceDirName:"animations",slug:"/animations/transition-types",permalink:"/docs/animations/transition-types",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/animations/transition-types.mdx",version:"current",frontMatter:{id:"transition-types",title:"Types of Transitions"},sidebar:"mainSidebar",previous:{title:"Animation basics",permalink:"/docs/animations/transition-basics"},next:{title:"Animating All Layout",permalink:"/docs/animations/transition-all-layout"}},s=[{value:"Change Transitions",id:"change-transitions",children:[]},{value:"Appear Transitions",id:"appear-transitions",children:[]},{value:"Disappear Transitions",id:"disappear-transitions",children:[]}],d={toc:s};function c(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.mdx)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Litho APIs allow you to create animated transitions between two consecutive states of the UI - ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutStates"),". We'll be addressing these states as ",(0,o.mdx)("em",{parentName:"p"},"before")," and ",(0,o.mdx)("em",{parentName:"p"},"after")," respectively."),(0,o.mdx)("p",null,"When defining transitions you need to indicate to the framework what ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component"),"/",(0,o.mdx)("inlineCode",{parentName:"p"},"AnimatedProperty")," pairs you want it to animate. Based on presence of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," in ",(0,o.mdx)("em",{parentName:"p"},"before")," and ",(0,o.mdx)("em",{parentName:"p"},"after")," states we can define 3 types of transitions: ",(0,o.mdx)("em",{parentName:"p"},"changing"),", ",(0,o.mdx)("em",{parentName:"p"},"appearing")," and ",(0,o.mdx)("em",{parentName:"p"},"disappearing"),"."),(0,o.mdx)("h3",{id:"change-transitions"},"Change Transitions"),(0,o.mdx)("p",null,"A transition where the target ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," is present in both ",(0,o.mdx)("em",{parentName:"p"},"before")," and ",(0,o.mdx)("em",{parentName:"p"},"after")," layouts is called a ",(0,o.mdx)("em",{parentName:"p"},"change")," transition."),(0,o.mdx)("p",null,"The sample from the ",(0,o.mdx)("a",{parentName:"p",href:"/docs/animations/transition-basics"},"Basics section")," features a ",(0,o.mdx)("em",{parentName:"p"},"change")," transition, since the ",(0,o.mdx)("inlineCode",{parentName:"p"},'"square"')," ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," is always present in the layout, but it changes its position - ",(0,o.mdx)("inlineCode",{parentName:"p"},"X")," property."),(0,o.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px"},(0,o.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/transitions/basics2.webm")}),(0,o.mdx)("p",null,"Your browser does not support the video element.")),(0,o.mdx)("p",null,"It is the simplest type from a user's perspective, so following is the explanation of how change type transitions work internally."),(0,o.mdx)("p",null,"Let's say, layout ",(0,o.mdx)("em",{parentName:"p"},"A")," (",(0,o.mdx)("em",{parentName:"p"},"before"),") is mounted (rendered on the screen) and we have a blueprint of the layout ",(0,o.mdx)("em",{parentName:"p"},"B")," (",(0,o.mdx)("em",{parentName:"p"},"after"),"), which the framework is ready to render. The transition is defined for a  ",(0,o.mdx)("inlineCode",{parentName:"p"},"AnimatedProperty.P")," of a ",(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentC"),", where ",(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentC")," is present in both layouts."),(0,o.mdx)("p",null,"The framework needs to do the following steps in order to run ",(0,o.mdx)("em",{parentName:"p"},"change")," animations:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Pick the current value of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from the mounted UI element (normally, a ",(0,o.mdx)("inlineCode",{parentName:"li"},"View"),") that represents ",(0,o.mdx)("inlineCode",{parentName:"li"},"ComponentC")," on the screen \u2014 this is going to be the ",(0,o.mdx)("em",{parentName:"li"},"start")," value for animation."),(0,o.mdx)("li",{parentName:"ol"},"Pick the animation ",(0,o.mdx)("em",{parentName:"li"},"end")," value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from the blueprint of layout ",(0,o.mdx)("em",{parentName:"li"},"B"),"."),(0,o.mdx)("li",{parentName:"ol"},"When the layout ",(0,o.mdx)("em",{parentName:"li"},"B")," is mounted to the screen, we do not apply the new value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"P")," right away, as we normally would, instead, we keep the previous value in place, but subscribe to the ",(0,o.mdx)("a",{parentName:"li",href:"pathname:///javadoc/com/facebook/litho/choreographercompat/ChoreographerCompat.html"},(0,o.mdx)("inlineCode",{parentName:"a"},"Choreographer")),", and start changing the value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"P")," for the new mounted UI element on every frame until it reaches the end value.")),(0,o.mdx)("p",null,"This is how the returned trees look like on both layout passes, ",(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentC")," is present in both trees.\nBefore"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Column.create(c)\n    .child(\n        SolidColor.create(c) // -> ComponentC\n            .color(YELLOW)\n            .widthDip(80)\n            .heightDip(80)\n            .transitionKey(SQUARE_KEY))\n    .alignItems(YogaAlign.FLEX_START) // AnimatedProperty.X aligned to start\n    .build();\n")),(0,o.mdx)("p",null,"After"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Column.create(c)\n    .child(\n        SolidColor.create(c) // -> ComponentC\n            .color(YELLOW)\n            .widthDip(80)\n            .heightDip(80)\n            .transitionKey(SQUARE_KEY))\n    .alignItems(YogaAlign.FLEX_END) // AnimatedProperty.X aligned to end\n    .build();\n")),(0,o.mdx)("h3",{id:"appear-transitions"},"Appear Transitions"),(0,o.mdx)("p",null,"In certain situations you may want to animate how a certain UI element appears on screen."),(0,o.mdx)("p",null,"In this case, we are dealing with an ",(0,o.mdx)("em",{parentName:"p"},"Appearing")," transition: a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," is present in the ",(0,o.mdx)("em",{parentName:"p"},"after")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutState"),", but wasn't seen in the ",(0,o.mdx)("em",{parentName:"p"},"before")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"LayoutState"),". In order to run transitions we need ",(0,o.mdx)("em",{parentName:"p"},"start")," and ",(0,o.mdx)("em",{parentName:"p"},"end")," values of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AnimatedProperty"),", while the framework, obviously, can only get the latter from the layout, thus it is the responsibility of the user to supply the ",(0,o.mdx)("em",{parentName:"p"},"start")," value. You can do this using ",(0,o.mdx)("inlineCode",{parentName:"p"},".appearFrom()")," (",(0,o.mdx)("em",{parentName:"p"},"lines 28, 30"),") method when building a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Transition"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=../../sample/src/main/java/com/facebook/samples/litho/java/animations/docs/AppearTransitionComponentSpec.java start=start end=end",file:"../../sample/src/main/java/com/facebook/samples/litho/java/animations/docs/AppearTransitionComponentSpec.java",start:"start",end:"end"},'@LayoutSpec\npublic class AppearTransitionComponentSpec {\n\n  private static final String SQUARE_KEY = "square";\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c, @State boolean shown) {\n    Component child;\n    if (shown) {\n      child =\n          SolidColor.create(c)\n              .color(YELLOW)\n              .widthDip(80)\n              .heightDip(80)\n              .transitionKey(SQUARE_KEY)\n              .build();\n    } else {\n      child = null;\n    }\n\n    return Column.create(c)\n        .heightPercent(100)\n        .child(child)\n        .clickHandler(AppearTransitionComponent.onClickEvent(c))\n        .alignItems(YogaAlign.FLEX_END)\n        .build();\n  }\n\n  @OnCreateTransition\n  static Transition onCreateTransition(ComponentContext c) {\n    return Transition.create(SQUARE_KEY)\n        .animate(AnimatedProperties.X)\n        .appearFrom(0f)\n        .animate(AnimatedProperties.ALPHA)\n        .appearFrom(0f);\n  }\n\n  @OnEvent(ClickEvent.class)\n  static void onClickEvent(ComponentContext c, @FromEvent View view) {\n    AppearTransitionComponent.onUpdateState(c);\n  }\n\n  @OnUpdateState\n  static void onUpdateState(StateValue<Boolean> shown) {\n    shown.set(!shown.get());\n  }\n}\n')),(0,o.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px"},(0,o.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/transitions/appear.webm")}),(0,o.mdx)("p",null,"Your browser does not support the video element.")),(0,o.mdx)("p",null,"Here's how the framework handles these transitions internally:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Pick the ",(0,o.mdx)("inlineCode",{parentName:"li"},"appearFrom")," value of the ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from ",(0,o.mdx)("inlineCode",{parentName:"li"},"Transition")," object - this is going to be the ",(0,o.mdx)("em",{parentName:"li"},"start")," value for the animation."),(0,o.mdx)("li",{parentName:"ol"},"As before, pick the animation ",(0,o.mdx)("em",{parentName:"li"},"end")," value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty.P")," from the blueprint of layout ",(0,o.mdx)("em",{parentName:"li"},"B"),"."),(0,o.mdx)("li",{parentName:"ol"},"When the layout ",(0,o.mdx)("em",{parentName:"li"},"B")," is mounted to the screen, instead of applying the ",(0,o.mdx)("em",{parentName:"li"},"end")," value from that layout to the mounted item immediately, we set the user-provided ",(0,o.mdx)("em",{parentName:"li"},"appearFrom")," value and drive that to the ",(0,o.mdx)("em",{parentName:"li"},"end")," value from the layout.")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentC")," is only present in the ",(0,o.mdx)("em",{parentName:"p"},"after")," tree.\nBefore"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"child = null;\n\nColumn.create(c)\n    .child(child) // ComponentC is null here\n    .alignItems(YogaAlign.FLEX_END)\n    .build();\n")),(0,o.mdx)("p",null,"After"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"child = SolidColor.create(c)\n    .color(YELLOW)\n    .widthDip(80)\n    .heightDip(80)\n    .transitionKey(SQUARE_KEY);\n\nColumn.create(c)\n    .child(child) // ComponentC is present and will be animated.\n    .alignItems(YogaAlign.FLEX_END)\n    .build();\n")),(0,o.mdx)("h3",{id:"disappear-transitions"},"Disappear Transitions"),(0,o.mdx)("p",null,"The opposite of ",(0,o.mdx)("em",{parentName:"p"},"Appearing")," type of transitions is ",(0,o.mdx)("em",{parentName:"p"},"Disappearing"),": when the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," is present in ",(0,o.mdx)("em",{parentName:"p"},"before")," layout, but is gone in the ",(0,o.mdx)("em",{parentName:"p"},"after")," layout. Following the same logic as before, now the responsibility of providing the ",(0,o.mdx)("em",{parentName:"p"},"end")," value falls on the user, which is done by using ",(0,o.mdx)("inlineCode",{parentName:"p"},".disappearTo()")," (",(0,o.mdx)("em",{parentName:"p"},"lines 8, 10"),")."),(0,o.mdx)("p",null,"Here is how we could add the disappearing animation to our sample:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"@OnCreateTransition\nstatic Transition onCreateTransition(ComponentContext c) {\n  return Transition.create(SQUARE_KEY)\n      .animate(AnimatedProperties.X)\n      .appearFrom(0f)\n      .animate(AnimatedProperties.ALPHA)\n      .appearFrom(0f)\n      .disappearTo(0f)\n      .animate(AnimatedProperties.SCALE)\n      .disappearTo(0.5f);\n}\n")),(0,o.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px"},(0,o.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/transitions/disappear.webm")}),(0,o.mdx)("p",null,"Your browser does not support the video element.")),(0,o.mdx)("p",null,"Under the hood, in order to run a disappearing animation, the framework follows this algorithm:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Pick up the ",(0,o.mdx)("em",{parentName:"li"},"start")," value from the mounted UI element that represents the ",(0,o.mdx)("inlineCode",{parentName:"li"},"Component")),(0,o.mdx)("li",{parentName:"ol"},"Retrieve the ",(0,o.mdx)("em",{parentName:"li"},"end")," from the user-provided ",(0,o.mdx)("inlineCode",{parentName:"li"},"disappearTo")," value of transition definition."),(0,o.mdx)("li",{parentName:"ol"},"Render the ",(0,o.mdx)("em",{parentName:"li"},"after")," layout, but instead of removing the UI element from screen right away, drive the value of ",(0,o.mdx)("inlineCode",{parentName:"li"},"AnimatedProperty")," to the ",(0,o.mdx)("em",{parentName:"li"},"end"),", and only then remove the UI element.")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentC")," is only present in the ",(0,o.mdx)("em",{parentName:"p"},"before")," tree.\nAfter"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"child = SolidColor.create(c)\n    .color(YELLOW)\n    .widthDip(80)\n    .heightDip(80)\n    .transitionKey(SQUARE_KEY);\n\nColumn.create(c)\n    .child(child) // ComponentC is present and will be animated.\n    .alignItems(YogaAlign.FLEX_END)\n    .build();\n")),(0,o.mdx)("p",null,"Before"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"child = null;\n\nColumn.create(c)\n    .child(child) // ComponentC is null here\n    .alignItems(YogaAlign.FLEX_END)\n    .build();\n")),(0,o.mdx)("div",{className:"admonition admonition-info alert alert--info"},(0,o.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,o.mdx)("h5",{parentName:"div"},(0,o.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.mdx)("div",{parentName:"div",className:"admonition-content"},(0,o.mdx)("p",{parentName:"div"},"It is important to understand that once the layout has been mounted (on step 3) a disappearing ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," isn't a part of layout tree anymore. However the drawing order of all the UI element is defined by the layout tree. Hence the UI element for the disappearing ",(0,o.mdx)("inlineCode",{parentName:"p"},"Component")," will be drawn the last. In some rare cases (normally involving cross-fading elements), this may result in the rendering being different from what you would expect. In such cases, a change animation should be used instead."))))}c.isMDXComponent=!0}}]);