"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4544],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>d,mdx:()=>g,useMDXComponents:()=>l,withMDXComponents:()=>m});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},a.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),m=function(e){return function(n){var t=l(n.components);return o.createElement(e,a({},n,{components:t}))}},l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||a;return t?o.createElement(h,c(c({ref:n},s),{},{components:t})):o.createElement(h,c({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=h;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},90900:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>c,contentTitle:()=>p,metadata:()=>s,toc:()=>m,default:()=>d});var o=t(87462),r=t(63366),a=(t(67294),t(3905)),i=["components"],c={id:"injectprop-matching",title:"Matching @InjectProp"},p=void 0,s={unversionedId:"testing/injectprop-matching",id:"testing/injectprop-matching",isDocsHomePage:!1,title:"Matching @InjectProp",description:"Checkout the getting started section to setup the test environment correctly.",source:"@site/../docs/testing/injectprop-matching.mdx",sourceDirName:"testing",slug:"/testing/injectprop-matching",permalink:"/docs/testing/injectprop-matching",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/testing/injectprop-matching.mdx",tags:[],version:"current",frontMatter:{id:"injectprop-matching",title:"Matching @InjectProp"},sidebar:"mainSidebar",previous:{title:"Matching @TreeProp",permalink:"/docs/testing/testing-treeprops"},next:{title:"Event Handler Testing",permalink:"/docs/testing/event-handler-testing"}},m=[{value:"Testing injected props",id:"testing-injected-props",children:[],level:2},{value:"Testing injected components",id:"testing-injected-components",children:[],level:2}],l={toc:m};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.mdx)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,a.mdx)("h5",{parentName:"div"},(0,a.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,a.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.mdx)("div",{parentName:"div",className:"admonition-content"},(0,a.mdx)("p",{parentName:"div"},"Checkout the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/testing/unit-testing"},"getting started")," section to setup the test environment correctly."))),(0,a.mdx)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,a.mdx)("h5",{parentName:"div"},(0,a.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,a.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.mdx)("div",{parentName:"div",className:"admonition-content"},(0,a.mdx)("p",{parentName:"div"},"Checkout the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/testing/subcomponent-testing"},(0,a.mdx)("strong",{parentName:"a"},"sub-component testing")),", and ",(0,a.mdx)("a",{parentName:"p",href:"/docs/testing/prop-matching"},(0,a.mdx)("strong",{parentName:"a"},"Prop Matching")),"\nsection before diving into ",(0,a.mdx)("inlineCode",{parentName:"p"},"@InjectProp")," testing."))),(0,a.mdx)("h2",{id:"testing-injected-props"},"Testing injected props"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"@InjectProp")," earmarks props to be provided by the client's dependency injection framework.\nComponents which have injected props can be tested using a ",(0,a.mdx)("inlineCode",{parentName:"p"},"@TestSpec")," and the prop-matching APIs."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Consider the following LayoutSpec:")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@LayoutSpec\nclass MyInjectPropSpec {\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @Prop String normalProp,\n      @InjectProp UserController injectedProp,\n      @InjectProp ProfilePictureComponent profilePicture) {\n    // ...\n  }\n}\n")),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Create a ",(0,a.mdx)("inlineCode",{parentName:"li"},"@TestSpec")," for ",(0,a.mdx)("strong",{parentName:"li"},"MyInjectPropSpec"))),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@TestSpec(MyInjectPropSpec.class)\npublic interface TestMyInjectPropSpec {}\n")),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Add ",(0,a.mdx)("inlineCode",{parentName:"li"},"@RunWith(LithoTestRunner.class)")," to the top of the test class."),(0,a.mdx)("li",{parentName:"ul"},"Add a JUnit ",(0,a.mdx)("a",{parentName:"li",href:"https://github.com/junit-team/junit4/wiki/Rules"},(0,a.mdx)("inlineCode",{parentName:"a"},"@Rule"))," ",(0,a.mdx)("inlineCode",{parentName:"li"},"LithoViewRule"),"."),(0,a.mdx)("li",{parentName:"ul"},"Add a check to ensure that tests are run in debug mode.\n",(0,a.mdx)("inlineCode",{parentName:"li"},"ComponentsConfiguration.IS_INTERNAL_BUILD")," must be true.")),(0,a.mdx)("p",null,"The test class should look like the following:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@RunWith(LithoTestRunner.class)\npublic class InjectPropMatcherGenerationTest {\n\n  public final @Rule LithoViewRule mLithoViewRule = new LithoViewRule();\n\n  @Before\n  public void assumeInDebugMode() {\n    assumeThat(\n      "These tests can only be run in debug mode.",\n      ComponentsConfiguration.IS_INTERNAL_BUILD, is(true)\n    );\n  }\n}\n')),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Set the value of the injected props before evaluating any assertions.")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenMyInjectPropComponentIsRendered_shouldUseProvidedInjectProps() {\n  final ComponentContext c = mLithoViewRule.getContext();\n  final MyInjectProp component = MyInjectProp.create(c)\n        .normalProp("normal string")\n        .build();\n\n  // Set the injected prop values.\n  component.injectedString = "injected string";\n  component.injectedKettle = new Kettle(92f);\n\n  final Condition<InspectableComponent> matcher =\n      TestMyInjectProp.matcher(c)\n          .normalString("normal string")\n          .injectedString("injected string")\n          .injectedKettle(new CustomTypeSafeMatcher<MyInjectPropSpec.Kettle>("matches temperature") {\n            @Override\n            protected boolean matchesSafely(MyInjectPropSpec.Kettle item) {\n              return Math.abs(item.temperatureCelsius - 92f) < 0.1;\n            }\n          })\n          .build();\n\n  assertThat(c, component).has(deepSubComponentWith(c, matcher));\n}\n')),(0,a.mdx)("p",null,"The example shows how tests written for injected props are almost the same as normal props.\nThe ",(0,a.mdx)("inlineCode",{parentName:"p"},"Kettle")," object is instantiated with a temperature, that is verified using a custom matcher."),(0,a.mdx)("h2",{id:"testing-injected-components"},"Testing injected components"),(0,a.mdx)("p",null,"Components can also be ",(0,a.mdx)("inlineCode",{parentName:"p"},"@InjectProp"),"s. Consider the following LayoutSpec:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@LayoutSpec\nclass MyInjectPropSpec {\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @InjectProp Text injectedComponent) {\n    return Column.create(c).child(injectedComponent).build();\n  }\n}\n")),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Assert if MyInjectProp is mounted with the injected Text component.")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenMyInjectPropComponentIsRendered_shouldUseProvidedInjectedComponent() {\n  final ComponentContext c = mLithoViewRule.getContext();\n  final MyInjectProp component = MyInjectProp.create(c).build();\n\n  component.injectedComponent = Text.create(c).text("injected text").build();\n\n  final Condition<InspectableComponent> matcher =\n      TestMyInjectProp.matcher(c)\n          .injectedComponent(TestText.matcher(c).text("injected text").build())\n          .build();\n\n  assertThat(c, component).has(deepSubComponentWith(c, matcher));\n}\n')))}d.isMDXComponent=!0}}]);