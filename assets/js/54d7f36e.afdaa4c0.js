"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7377],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>s});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=o.createContext({}),s=function(e){return function(n){var t=d(n.components);return o.createElement(e,r({},n,{components:t}))}},d=function(e){var n=o.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(m.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),s=d(t),c=a,u=s["".concat(l,".").concat(c)]||s[c]||h[c]||r;return t?o.createElement(u,p(p({ref:n},m),{},{components:t})):o.createElement(u,p({ref:n},m))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var m=2;m<r;m++)l[m]=t[m];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},87353:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>p,contentTitle:()=>i,metadata:()=>m,toc:()=>s,default:()=>c});var o=t(87462),a=t(63366),r=(t(67294),t(3905)),l=["components"],p={id:"props",title:"Types of Props",keywords:["litho props","common props","tree props","treeprops","treeprop","litho style"]},i=void 0,m={unversionedId:"mainconcepts/props",id:"mainconcepts/props",isDocsHomePage:!1,title:"Types of Props",description:"The previous section details how to declare a component and its props as standard val properties. This section covers two more ways for a parent component to configure its children with props: Common props and Tree props.",source:"@site/../docs/mainconcepts/props.mdx",sourceDirName:"mainconcepts",slug:"/mainconcepts/props",permalink:"/docs/mainconcepts/props",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/props.mdx",tags:[],version:"current",frontMatter:{id:"props",title:"Types of Props",keywords:["litho props","common props","tree props","treeprops","treeprop","litho style"]},sidebar:"mainSidebar",previous:{title:"Components",permalink:"/docs/mainconcepts/components-basics"},next:{title:"Introduction to Hooks",permalink:"/docs/mainconcepts/hooks-intro"}},s=[{value:"Common Props",id:"common-props",children:[{value:"Combining a <code>Style</code> from above with a local <code>Style</code>",id:"combining-a-style-from-above-with-a-local-style",children:[],level:3},{value:"Working with <code>Style</code>",id:"working-with-style",children:[],level:3},{value:"Java - Kotlin Compatibility",id:"java---kotlin-compatibility",children:[],level:3}],level:2},{value:"Tree Props",id:"tree-props",children:[{value:"Declaring a Tree Prop",id:"declaring-a-tree-prop",children:[],level:3},{value:"Using a Tree Prop",id:"using-a-tree-prop",children:[],level:3},{value:"When to Use Tree Props",id:"when-to-use-tree-props",children:[],level:3}],level:2}],d={toc:s};function c(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.mdx)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"../components-basics"},"previous section")," details how to declare a component and its ",(0,r.mdx)("strong",{parentName:"p"},"props")," as standard ",(0,r.mdx)("inlineCode",{parentName:"p"},"val")," properties. This section covers two more ways for a parent component to configure its children with props: ",(0,r.mdx)("a",{parentName:"p",href:"#common-props"},"Common props")," and ",(0,r.mdx)("a",{parentName:"p",href:"#tree-props"},"Tree props"),"."),(0,r.mdx)("h2",{id:"common-props"},"Common Props"),(0,r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},(0,r.mdx)("strong",{parentName:"p"},"Definition"),": A ",(0,r.mdx)("em",{parentName:"p"},"common prop")," is one of a set of properties that can be applied to any primitive component."))),(0,r.mdx)("p",null,"Common props are supported by all primitive components. They include View properties like ",(0,r.mdx)("inlineCode",{parentName:"p"},"onClick")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"background"),", visibility events like ",(0,r.mdx)("inlineCode",{parentName:"p"},"onVisible"),", as well as layout parameters like ",(0,r.mdx)("inlineCode",{parentName:"p"},"margin"),"."),(0,r.mdx)("p",null,"These common props are specified using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," API: the API allows one or more common props to be chained together into a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," object which is passed to the components as a prop."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'val style = Style.margin(all = 4.px)\n    .backgroundColor(Color.RED)\n    .viewTag("my_view")\n')),(0,r.mdx)("p",null,"For a component to be configured with a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style"),", it should declare a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," prop (such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"val style: Style? = null"),"). It should then pass that ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," object to one of the components it renders to, usually the root component it returns from ",(0,r.mdx)("inlineCode",{parentName:"p"},"render"),". In this way, the style will eventually end up on a primitive component (for example, ",(0,r.mdx)("inlineCode",{parentName:"p"},"Text")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"Row)"),". All common props end up being materialized by primitive components."),(0,r.mdx)("p",null,"This is easiest to show by example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/HelloComponent.kt start=start_styled_example end=end_styled_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/HelloComponent.kt",start:"start_styled_example",end:"end_styled_example"},'class StyledHelloComponent(private val style: Style? = null, private val name: String) :\n    KComponent() {\n\n  override fun ComponentScope.render(): Component? {\n    return Text(style = style, text = "Hello $name!")\n  }\n}\n\nval componentWithOnClick =\n    StyledHelloComponent(style = Style.onClick { log("clicked!") }, name = "Common Props")\n')),(0,r.mdx)("h3",{id:"combining-a-style-from-above-with-a-local-style"},"Combining a ",(0,r.mdx)("inlineCode",{parentName:"h3"},"Style")," from above with a local ",(0,r.mdx)("inlineCode",{parentName:"h3"},"Style")),(0,r.mdx)("p",null,"A more advanced example shows how you can combine a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," taken from above with the Style the component itself wants to define:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt start=start_combine_style_example end=end_combine_style_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt",start:"start_combine_style_example",end:"end_combine_style_example"},'class OuterTextComponent : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    return InnerTextComponent(style = Style.margin(all = 8.dp))\n  }\n}\n\nclass InnerTextComponent(private val style: Style? = null) : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    return Text(\n        style = Style.padding(all = 8.dp).alpha(.5f) + style,\n        text = "I accept style from a parent!")\n  }\n}\n')),(0,r.mdx)("h3",{id:"working-with-style"},"Working with ",(0,r.mdx)("inlineCode",{parentName:"h3"},"Style")),(0,r.mdx)("p",null,"In the above example, you may have noticed the use of ",(0,r.mdx)("inlineCode",{parentName:"p"},"+")," to combine the style passed from ",(0,r.mdx)("inlineCode",{parentName:"p"},"OuterTextComponent")," and the styles that ",(0,r.mdx)("inlineCode",{parentName:"p"},"InnerTextComponent")," defines. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"+")," operator combines two styles into a single style without mutating either:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val alphaStyle = Style.alpha(1f)\nval combinedStyle = alphaStyle + Style.padding(all = 8.dp).margin(all = 8.dp)\n\n// Result:\n//   alphaStyle: (alpha: 1f)\n//   combinedStyle: (alpha: 1f) <- (padding-all: 8.dp) <- (margin-all: 8.dp)\n")),(0,r.mdx)("p",null,"Note that ordering around ",(0,r.mdx)("inlineCode",{parentName:"p"},"+")," matters: if a style property is defined twice, the ",(0,r.mdx)("strong",{parentName:"p"},"last")," definition wins:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val alphaStyle = Style.alpha(1f)\nval combinedStyle = alphaStyle + Style.padding(all = 8.dp).alpha(.5f)\n\n// Result:\n//   combinedStyle will apply padding of 8.dp and alpha of .5f\n")),(0,r.mdx)("p",null,"Generally speaking, ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," objects are immutable: any time you combine Styles or add new properties to a Style, you get a new Style instance that contains all the properties of the previous style plus the new properties."),(0,r.mdx)("h3",{id:"java---kotlin-compatibility"},"Java - Kotlin Compatibility"),(0,r.mdx)("p",null,"If you need to pass down a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," from a Java class to a Kotlin ",(0,r.mdx)("inlineCode",{parentName:"p"},"KComponent"),", use ",(0,r.mdx)("inlineCode",{parentName:"p"},"StyleCompat"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/OuterStyleComponentSpec.java start=start_combine_style_outer_example end=end_combine_style_outer_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/OuterStyleComponentSpec.java",start:"start_combine_style_outer_example",end:"end_combine_style_outer_example"},"@LayoutSpec\nclass OuterStyleComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c) {\n    return new InnerTextComponent(StyleCompat.marginDip(YogaEdge.ALL, 8).build());\n  }\n}\n")),(0,r.mdx)("p",null,"For the other way around (passing ",(0,r.mdx)("inlineCode",{parentName:"p"},"style")," from Kotlin code to a Java ",(0,r.mdx)("inlineCode",{parentName:"p"},"Component Spec"),") you can use ",(0,r.mdx)("inlineCode",{parentName:"p"},".kotlinStyle()"),", which is equivalent to setting all the common props the Style defines."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt start=start_combine_java_kotlin_style_example end=end_combine_java_kotlin_style_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt",start:"start_combine_java_kotlin_style_example",end:"end_combine_java_kotlin_style_example"},"class OuterStyleKComponent : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    val style = Style.margin(all = 8.dp)\n    return OuterStyleComponent.create(context).kotlinStyle(style).build()\n  }\n}\n")),(0,r.mdx)("h2",{id:"tree-props"},"Tree Props"),(0,r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},(0,r.mdx)("strong",{parentName:"p"},"Definition"),": A ",(0,r.mdx)("em",{parentName:"p"},"tree prop")," is a special type of prop which is transparently passed from a parent component to its children."))),(0,r.mdx)("p",null,"A TreeProp is a special type of prop which is transparently passed from a parent component to its children. It provides a convenient way to share contextual data or utilities in a tree without having to explicitly pass ",(0,r.mdx)("inlineCode",{parentName:"p"},"val")," properties to every component in your hierarchy."),(0,r.mdx)("h3",{id:"declaring-a-tree-prop"},"Declaring a Tree Prop"),(0,r.mdx)("p",null,"In order to declare a TreeProp you need to use ",(0,r.mdx)("inlineCode",{parentName:"p"},"TreePropProvider")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsExampleComponent.kt start=declaring_tree_prop_start end=declaring_tree_prop_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsExampleComponent.kt",start:"declaring_tree_prop_start",end:"declaring_tree_prop_end"},"return TreePropProvider(\n    Typeface::class.java to Typeface.DEFAULT_BOLD,\n    String::class.java to getTextTitle(),\n    Int::class.java to Color.RED) { TreePropsChildComponent() }\n")),(0,r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"You can only declare one TreeProp for any one given type. If a child of ParentComponent also defines a TreeProp of the given type, it will override the value of that TreeProp for all its children (but not for itself)."))),(0,r.mdx)("h3",{id:"using-a-tree-prop"},"Using a Tree Prop"),(0,r.mdx)("p",null,"The child component can access the TreeProp value through a ",(0,r.mdx)("inlineCode",{parentName:"p"},"ComponentScope.getTreeProp<>()")," method that has the same type which was declared in the parents ",(0,r.mdx)("inlineCode",{parentName:"p"},"TreePropProvider")," call."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsChildComponent.kt start=using_tree_prop_start end=using_tree_prop_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsChildComponent.kt",start:"using_tree_prop_start",end:"using_tree_prop_end"},"val color = getTreeProp<Int>()\nval typeface = getTreeProp<Typeface>()\nval title = getTreeProp<String>()\n")),(0,r.mdx)("h3",{id:"when-to-use-tree-props"},"When to Use Tree Props"),(0,r.mdx)("p",null,"Tree Props are powerful, but when overused can make your component code more difficult to reason about. Best practices are to only use tree props for things that the whole tree needs to know about, like theming information or loggers, and not just as a more convenient way to get props to the leaves of a tree of components."))}c.isMDXComponent=!0}}]);