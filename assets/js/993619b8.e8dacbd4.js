"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8129],{3905:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>f,useMDXComponents:()=>s,withMDXComponents:()=>c});var t=a(67294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function m(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=t.createContext({}),c=function(e){return function(n){var a=s(n.components);return t.createElement(e,i({},n,{components:a}))}},s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):m(m({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(a),d=o,h=c["".concat(r,".").concat(d)]||c[d]||u[d]||i;return a?t.createElement(h,m(m({ref:n},p),{},{components:a})):t.createElement(h,m({ref:n},p))}));function f(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=h;var m={};for(var l in n)hasOwnProperty.call(n,l)&&(m[l]=n[l]);m.originalType=e,m.mdxType="string"==typeof e?e:o,r[1]=m;for(var p=2;p<i;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},13919:(e,n,a)=>{function t(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!t(e)}a.d(n,{b:()=>t,Z:()=>o})},44996:(e,n,a)=>{a.r(n),a.d(n,{useBaseUrlUtils:()=>i,default:()=>r});var t=a(52263),o=a(13919);function i(){var e=(0,t.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,a=void 0===n?"/":n,i=e.url;return{withBaseUrl:function(e,n){return function(e,n,a,t){var i=void 0===t?{}:t,r=i.forcePrependBaseUrl,m=void 0!==r&&r,l=i.absolute,p=void 0!==l&&l;if(!a)return a;if(a.startsWith("#"))return a;if((0,o.b)(a))return a;if(m)return n+a;var c=a.startsWith(n)?a:n+a.replace(/^\//,"");return p?e+c:c}(i,a,e,n)}}}function r(e,n){return void 0===n&&(n={}),(0,i().withBaseUrl)(e,n)}},44786:(e,n,a)=>{a.r(n),a.d(n,{frontMatter:()=>m,contentTitle:()=>l,metadata:()=>p,toc:()=>c,default:()=>d});var t=a(87462),o=a(63366),i=(a(67294),a(3905)),r=a(44996),m={id:"dynamic-props",title:"Dynamic Props"},l=void 0,p={unversionedId:"mainconcepts/coordinate-state-actions/dynamic-props",id:"mainconcepts/coordinate-state-actions/dynamic-props",isDocsHomePage:!1,title:"Dynamic Props",description:"This page was moved from the old website without any change and might be updated",source:"@site/../docs/mainconcepts/coordinate-state-actions/dynamic-props.mdx",sourceDirName:"mainconcepts/coordinate-state-actions",slug:"/mainconcepts/coordinate-state-actions/dynamic-props",permalink:"/docs/mainconcepts/coordinate-state-actions/dynamic-props",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/coordinate-state-actions/dynamic-props.mdx",version:"current",frontMatter:{id:"dynamic-props",title:"Dynamic Props"},sidebar:"mainSidebar",previous:{title:"ComponentTree",permalink:"/docs/mainconcepts/coordinate-state-actions/componenttree"},next:{title:"Basics: DiffSection and GroupSection",permalink:"/docs/sections/start"}},c=[{value:"Common Dynamic Props",id:"common-dynamic-props",children:[]},{value:"Custom Dynamic Props for MountSpecs",id:"custom-dynamic-props-for-mountspecs",children:[]},{value:"Animating Common Dynamic Props",id:"animating-common-dynamic-props",children:[]}],s={toc:c};function d(e){var n=e.components,a=(0,o.Z)(e,["components"]);return(0,i.mdx)("wrapper",(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Content will be updated")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},"This page was moved from the old website without any change and might be updated"))),(0,i.mdx)("p",null,"Normally, when the value of a ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop")," within a ",(0,i.mdx)("inlineCode",{parentName:"p"},"ComponentTree")," changes, the framework needs to compute layout and mount the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," again.\nHowever, there is a category of ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Props")," that do not affect layout, thus when the value of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop"),' changes, the framework can take a "shortcut": apply the new value to the mounted UI element that represents the ',(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," right away.\nWe call such properties ",(0,i.mdx)("em",{parentName:"p"},'"dynamic"'),".\n",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/DynamicValue.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"DynamicValue<T>"))," is the interface that makes it possible."),(0,i.mdx)("h3",{id:"common-dynamic-props"},"Common Dynamic Props"),(0,i.mdx)("p",null,"The dynamic properties that are available for ",(0,i.mdx)("strong",{parentName:"p"},"all")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"Components")," are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Alpha"),(0,i.mdx)("li",{parentName:"ul"},"Scale X/Y"),(0,i.mdx)("li",{parentName:"ul"},"Translation X/Y"),(0,i.mdx)("li",{parentName:"ul"},"Background Color"),(0,i.mdx)("li",{parentName:"ul"},"Rotation"),(0,i.mdx)("li",{parentName:"ul"},"Elevation (from Lollipop and above)")),(0,i.mdx)("p",null,"To use this, all you need to do is to create and pass a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue<T>")," object to the corresponding ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/Component.Builder.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"Component.Builder"))," method.\nNormally, you would hold on to this object, and use its ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/DynamicValue.html#set-T-"},(0,i.mdx)("inlineCode",{parentName:"a"},"set()"))," method to update the actual value."),(0,i.mdx)("p",null,"In the following sample we have a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," that renders a yellow square in the middle of the screen.\nWe also have two regular Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"SeekBars"),' "outside" of the ',(0,i.mdx)("inlineCode",{parentName:"p"},"Components")," hierarchy that control the alpha and the scale levels of the square."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px"},(0,i.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/common_dynamic_props.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"/**\n * MyComponentSpec.java\n */\n@LayoutSpec\npublic class MyComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @Prop DynamicValue<Float> alphaDV,\n      @Prop DynamicValue<Float> scaleDV) {\n    Component yellowSquare = Rect.create(c)\n                .color(YELLOW)\n                .alpha(alphaDV)\n                .scaleX(scaleDV)\n                .scaleY(scaleDV)\n                .build();\n\n    return Column.create(c)\n        .child(yellowSquare)\n        .alignItems(YogaAlign.CENTER)\n        .justifyContent(YogaJustify.CENTER)\n        .build();\n  }\n}\n\n/**\n * MyActivity.java\n */\npublic class MyActivity extends Activity\n    implements SeekBar.OnSeekBarChangeListener {\n\n  private DynamicValue<Float> mAlphaDV;\n  private DynamicValue<Float> mScaleDV;\n\n  private TextView mAlphaLabel;\n  private TextView mScaleLabel;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    mAlphaDV = new DynamicValue<>(1f);\n    mScaleDV = new DynamicValue<>(1f);\n\n    setContentView(R.layout.activity);\n\n    ComponentContext c = new ComponentContext(this);\n    Component component = MyComponent.create(c)\n            .alphaDV(mAlphaDV)\n            .scaleDV(mScaleDV)\n            .build();\n\n    LithoView lithoView = findViewById(R.id.lithoView);\n    lithoView.setComponent(component);\n\n    mAlphaLabel = findViewById(R.id.alphaValue);\n    mScaleLabel = findViewById(R.id.scaleValue);\n\n    SeekBar alphaSeekBar = findViewById(R.id.alphaSeekBar);\n    alphaSeekBar.setMax(100);\n    alphaSeekBar.setProgress(100);\n    alphaSeekBar.setOnSeekBarChangeListener(this);\n\n    SeekBar scaleSeekBar = findViewById(R.id.scaleSeekBar);\n    scaleSeekBar.setMax(150);\n    scaleSeekBar.setProgress(50);\n    scaleSeekBar.setOnSeekBarChangeListener(this);\n  }\n\n  @Override\n  public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n    if (seekBar.getId() == R.id.alphaSeekBar) {\n      // Update alpha value and label\n      float alpha = progress / 100f;\n      mAlphaDV.set(alpha);\n      mAlphaLabel.setText(Float.toString(alpha));\n    } else {\n      // Update scale value and label\n      float scale = (progress + 50) / 100f;\n      mScaleDV.set(scale);\n      mScaleLabel.setText(Float.toString(scale));\n    }\n  }\n}\n")),(0,i.mdx)("p",null,"Notice that:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"On ",(0,i.mdx)("em",{parentName:"li"},"lines 43-44"),", in ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyActivity.java"),", we create ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," objects"),(0,i.mdx)("li",{parentName:"ol"},"On ",(0,i.mdx)("em",{parentName:"li"},"lines 50-51"),", in ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyActivity.java"),", we supply the ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValues")," to the ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyComponent")," (just as regular ",(0,i.mdx)("inlineCode",{parentName:"li"},"@Props"),")."),(0,i.mdx)("li",{parentName:"ol"},"On ",(0,i.mdx)("em",{parentName:"li"},"lines 14-16"),", in ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyComponentSpec.java"),", we pass ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue<Float>")," objects to ",(0,i.mdx)("inlineCode",{parentName:"li"},"alpha()"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"scaleX()")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"scaleY()")," methods of ",(0,i.mdx)("inlineCode",{parentName:"li"},"Component.Builder")," to control the corresponding properties of the ",(0,i.mdx)("inlineCode",{parentName:"li"},"Rect")," component."),(0,i.mdx)("li",{parentName:"ol"},"On ",(0,i.mdx)("em",{parentName:"li"},"lines 76, 81"),", in ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyActivity.java"),", we use the ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," objects to keep the state of the ",(0,i.mdx)("inlineCode",{parentName:"li"},"SeekBars")," and the value of the properties they control in sync.")),(0,i.mdx)("h3",{id:"custom-dynamic-props-for-mountspecs"},"Custom Dynamic Props for MountSpecs"),(0,i.mdx)("p",null,"You may have your own ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountSpec")," which has ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Props")," that also do not affect layout.\nIt is possible to control the values of those properties in similar way using ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," interface.\nHowever, in this case you will need to tell framework ",(0,i.mdx)("em",{parentName:"p"},"how")," to apply the value of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop")," to the mounted element."),(0,i.mdx)("p",null,"To show you how to do this, let us consider a ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountSpec")," that mounts a ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/master/sample/src/main/java/com/facebook/samples/litho/java/dynamicprops/ClockView.java"},(0,i.mdx)("inlineCode",{parentName:"a"},"ClockView"))," and defines ",(0,i.mdx)("inlineCode",{parentName:"p"},"time")," property, which it passes to the View in ",(0,i.mdx)("inlineCode",{parentName:"p"},"@OnMount"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"/**\n * ClockComponentSpec.java\n */\n@MountSpec\nclass ClockComponentSpec {\n\n  @OnCreateMountContent\n  static ClockView onCreateMountContent(Context c) {\n    return new ClockView(c);\n  }\n\n  @OnMount\n  static void onMount(ComponentContext c, ClockView clockView, @Prop long time) {\n    clockView.setTime(time);\n  }\n}\n")),(0,i.mdx)("img",{src:(0,r.default)("/images/clock_view.png"),height:"500"}),(0,i.mdx)("p",null,"Notice that the value of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"time")," property does not affect layout, it only controls how the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ClockView")," draws clock hands.\nHowever, every time you want to update it the framework will have to go through ",(0,i.mdx)("inlineCode",{parentName:"p"},"LayoutState")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountState"),"."),(0,i.mdx)("p",null,"Here is how we can fix this by converting to Dynamic Props and, at the same time, get a more convenient interface to adjust the value."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"/**\n * ClockComponentSpec.java\n */\n@MountSpec\nclass ClockComponentSpec {\n\n  @OnCreateMountContent\n  static ClockView onCreateMountContent(Context c) {\n    return new ClockView(c);\n  }\n\n  @OnBindDynamicValue\n  static void onBindTime(\n      ClockView clockView,\n      @Prop(dynamic = true) long time) {\n    clockView.setTime(time);\n  }\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"First thing")," you need to do is to mark the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop")," as dynamic - ",(0,i.mdx)("em",{parentName:"p"},"line 15"),".\nOnce you have done this, the framework will generate an additional method to the builder of your ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," that takes a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),'.\nAt the same time it will keep the version of this method that takes "static" value, if you choose to use this in some situations.'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"/**\n * ClockComponent.java (generated)\n */\n public final class ClockComponent extends Component {\n   ...\n   public static final class Builder extends Component.Builder<Builder> {\n      ...\n      public Builder time(DynamicValue<Long> time) {...}\n      public Builder time(long time) {...}\n      ...\n   }\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Second thing")," is to create a ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/annotations/OnBindDynamicValue.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"@OnBindDynamicValue"))," method - ",(0,i.mdx)("em",{parentName:"p"},"lines 12-17")," in ",(0,i.mdx)("inlineCode",{parentName:"p"},"ClockComponentSpec.java")," - that should set the value to the mounted content.\nThis method should always takes 2 arguments - mounted content, and the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop")," itself. You need to create one such method for every dynamic ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop")," you define.\nThen, it is the responsibility of the framework to invoke these methods to keep changes to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),"."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px"},(0,i.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/custom_dynamic_props.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/tree/master/sample/src/main/java/com/facebook/samples/litho/java/dynamicprops"},"Here")," you find the full implementation of the sample above."),(0,i.mdx)("h3",{id:"animating-common-dynamic-props"},"Animating Common Dynamic Props"),(0,i.mdx)("p",null,"Dynamic Props values can be used with Android Animators to create custom animations.\nIn the following example we define a click event that starts an animation. As this is using Android's animation api we can easily set properties like duration and interpolation. We can also register for callbacks using ",(0,i.mdx)("inlineCode",{parentName:"p"},"Animator.addListener(..)"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'@LayoutSpec\nclass CallbackExampleComponentSpec {\n\n  private static final long ANIMATION_DURATION_MS = 1000;\n  private static final float SCALE_TO = 1.7f;\n\n  private static Animator createScaleAnimator(final DynamicValue<Float> scale) {\n    // Create an Android Animator\n    final ValueAnimator scaleAnimator = ValueAnimator.ofFloat(1f, SCALE_TO, 1f);\n    scaleAnimator.setDuration(ANIMATION_DURATION_MS);\n    scaleAnimator.setInterpolator(new AccelerateDecelerateInterpolator());\n    scaleAnimator.addUpdateListener(\n        new ValueAnimator.AnimatorUpdateListener() {\n          @Override\n          public void onAnimationUpdate(ValueAnimator animation) {\n            // Update the dynamic value every frame\n            scale.set((Float) animation.getAnimatedValue());\n          }\n        });\n    return scaleAnimator;\n  }\n\n  @OnCreateInitialState\n  static void createInitialState(\n      ComponentContext c,\n      StateValue<AtomicReference<Animator>> animatorRef,\n      StateValue<DynamicValue<Float>> scale) {\n    animatorRef.set(new AtomicReference<Animator>(null));\n    scale.set(new DynamicValue<>(1f));\n  }\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c, @State DynamicValue<Float> scale) {\n    return Column.create(c)\n        .alignItems(YogaAlign.CENTER)\n        .justifyContent(YogaJustify.CENTER)\n        .paddingDip(YogaEdge.ALL, 50)\n        .clickHandler(CallbackExampleComponent.onClick(c))\n        .child(\n            // Create the component that will animate, and set the dynamic value on it\n            Text.create(c).text("\\uD83D\\uDE18").textSizeSp(50).scaleX(scale).scaleY(scale))\n        .build();\n  }\n\n  @OnEvent(ClickEvent.class)\n  static void onClick(\n      final ComponentContext c,\n      @State AtomicReference<Animator> animatorRef,\n      @State DynamicValue<Float> scale) {\n    // Wrapping the Animator in an AtomicReference allows us to easily access\n    // the previous Animator so it can be cancelled.\n    Animator oldAnimator = animatorRef.get();\n    if (oldAnimator != null) {\n      oldAnimator.cancel();\n    }\n\n    final Animator newAnimator = createScaleAnimator(scale);\n    animatorRef.set(newAnimator);\n\n    // Add custom callbacks to animation events\n    newAnimator.addListener(\n        new Animator.AnimatorListener() {\n          @Override\n          public void onAnimationStart(Animator animation) {}\n\n          @Override\n          public void onAnimationEnd(Animator animation) {\n            Toast.makeText(c.getAndroidContext(), "Animation finished", Toast.LENGTH_SHORT).show();\n          }\n\n          @Override\n          public void onAnimationCancel(Animator animation) {}\n\n          @Override\n          public void onAnimationRepeat(Animator animation) {}\n        });\n\n    newAnimator.start();\n  }\n}\n')),(0,i.mdx)("p",null,"In this example we have created a simple ",(0,i.mdx)("inlineCode",{parentName:"p"},"LayoutSpec")," that contains a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," component that animates when we click it.\nThe scale of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," defined by a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),", which will trigger a re-draw when ever it is updated. The ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," is defined within a ",(0,i.mdx)("inlineCode",{parentName:"p"},"@State")," so that it can be easily shared between the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LayoutSpec"),"'s static functions.\nThere is an ",(0,i.mdx)("inlineCode",{parentName:"p"},"Animator")," that updates the scale ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),". The ",(0,i.mdx)("inlineCode",{parentName:"p"},"Animator")," is defined as a ",(0,i.mdx)("inlineCode",{parentName:"p"},"@State")," so the instance can be shared between different on click events. It is also wrapped inside an ",(0,i.mdx)("inlineCode",{parentName:"p"},"AtomicReference")," which allows us to replace the Animator instance so we don't have to re-use the same ",(0,i.mdx)("inlineCode",{parentName:"p"},"Animator")," for different animations."),(0,i.mdx)("p",null,"For more examples of creating Animations using Common Dynamic Props, see our ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/tree/master/sample/src/main/java/com/facebook/samples/litho/java/animations/animationcookbook"},"Animations Cook Book")," in the Sample App."))}d.isMDXComponent=!0}}]);