"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8330],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>s});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=r.createContext({}),s=function(e){return function(n){var t=m(n.components);return r.createElement(e,i({},n,{components:t}))}},m=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},x=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=m(t),u=l,x=s["".concat(o,".").concat(u)]||s[u]||c[u]||i;return t?r.createElement(x,a(a({ref:n},p),{},{components:t})):r.createElement(x,a({ref:n},p))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,o=new Array(i);o[0]=x;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a.mdxType="string"==typeof e?e:l,o[1]=a;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}x.displayName="MDXCreateElement"},97497:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>a,contentTitle:()=>d,metadata:()=>p,toc:()=>s,Button:()=>m,default:()=>c});var r=t(87462),l=t(63366),i=(t(67294),t(3905)),o=["components"],a={id:"builtin-widgets",title:"Built-in widgets"},d=void 0,p={unversionedId:"widgets/builtin-widgets",id:"widgets/builtin-widgets",isDocsHomePage:!1,title:"Built-in widgets",description:"Litho provides a number of build-in components.",source:"@site/../docs/widgets/builtin-widgets.mdx",sourceDirName:"widgets",slug:"/widgets/builtin-widgets",permalink:"/docs/widgets/builtin-widgets",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/widgets/builtin-widgets.mdx",tags:[],version:"current",frontMatter:{id:"builtin-widgets",title:"Built-in widgets"},sidebar:"mainSidebar",previous:{title:"Internal \ud83c\udfd7: Sections implementation architecture",permalink:"/docs/sections/architecture"},next:{title:"Debugging Tips",permalink:"/docs/debugging/debugging-tips"}},s=[{value:"Text",id:"text",children:[{value:"Required Props",id:"required-props",children:[],level:5},{value:"Usage",id:"usage",children:[],level:4}],level:2},{value:"TextInput",id:"textinput",children:[{value:"Required Props",id:"required-props-1",children:[],level:5},{value:"Usage",id:"usage-1",children:[],level:4}],level:2},{value:"Image",id:"image",children:[{value:"Required Props",id:"required-props-2",children:[],level:5},{value:"Usage",id:"usage-2",children:[],level:4}],level:2},{value:"Card",id:"card",children:[{value:"Required Props",id:"required-props-3",children:[],level:5},{value:"Usage",id:"usage-3",children:[],level:4}],level:2},{value:"SolidColor",id:"solidcolor",children:[{value:"Required Props",id:"required-props-4",children:[],level:5},{value:"Usage",id:"usage-4",children:[],level:4}],level:2},{value:"Progress",id:"progress",children:[{value:"Required Props",id:"required-props-5",children:[],level:5},{value:"Usage",id:"usage-5",children:[],level:4}],level:2},{value:"Spinner",id:"spinner",children:[{value:"Required Props",id:"required-props-6",children:[],level:5},{value:"Usage",id:"usage-6",children:[],level:4}],level:2},{value:"VerticalScroll",id:"verticalscroll",children:[{value:"Required Props",id:"required-props-7",children:[],level:5},{value:"Usage",id:"usage-7",children:[],level:4}],level:2},{value:"HorizontalScroll",id:"horizontalscroll",children:[{value:"Required Props",id:"required-props-8",children:[],level:5},{value:"Usage",id:"usage-8",children:[],level:4}],level:2},{value:"Recycler",id:"recycler",children:[],level:2}],m=function(e){var n=e.label,t=e.url;return(0,i.mdx)("a",{class:"button button--primary widget-button",href:t},n)},u={toc:s,Button:m};function c(e){var n=e.components,t=(0,l.Z)(e,o);return(0,i.mdx)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Litho provides a number of build-in components.\nYou can find the full list of components and APIs within our ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/index.html?com/facebook/litho/widget/package-summary.html"},"javadocs for the com.facebook.litho.widget package"),"."),(0,i.mdx)("p",null,"We'll show and explain here a list of the most basic widgets."),(0,i.mdx)("p",null,"Font Size:\nbold italic\nSize\nVertical Size:\nHorizontal Size:\nBorder\nBorder Radius:\nBorder Size:\nBox Shadow\nText Shadow\nVertical Position:\nHorizontal Position:\nBlur Radius:"),(0,i.mdx)(m,{label:"Text",url:"#text",mdxType:"Button"}),(0,i.mdx)(m,{label:"TextInput",url:"#textinput",mdxType:"Button"}),(0,i.mdx)(m,{label:"Image",url:"#image",mdxType:"Button"}),(0,i.mdx)(m,{label:"Card",url:"#card",mdxType:"Button"}),(0,i.mdx)(m,{label:"SolidColor",url:"#solidcolor",mdxType:"Button"}),(0,i.mdx)(m,{label:"Progress",url:"#progress",mdxType:"Button"}),(0,i.mdx)(m,{label:"Spinner",url:"#spinner",mdxType:"Button"}),(0,i.mdx)(m,{label:"VerticalScroll",url:"#verticalscroll",mdxType:"Button"}),(0,i.mdx)(m,{label:"HorizontalScroll",url:"#horizontalscroll",mdxType:"Button"}),(0,i.mdx)(m,{label:"Recycler",url:"#recycler",mdxType:"Button"}),(0,i.mdx)("h2",{id:"text"},"Text"),(0,i.mdx)("p",null,"This is the most basic Litho component to show simple text. It's the equivalent of an Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"TextView")," within Litho."),(0,i.mdx)("h5",{id:"required-props"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"CharSequence text"),": Text to display.")),(0,i.mdx)("h4",{id:"usage"},"Usage"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," has numerous optional props you can use to style your text, same as ",(0,i.mdx)("inlineCode",{parentName:"p"},"TextView")," since both use ",(0,i.mdx)("inlineCode",{parentName:"p"},"android.text.Layout")," under the hood. A full list of them is available in the ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/Text.html"},"javadocs"),".\nMost props directly accept resources ids too."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'final Component component =\n    Text.create(c)\n        .text("This is my example text")\n        .textSizeRes(R.dimen.my_text_size)\n        .textColorRes(R.color.my_text_color)\n        .textAlignment(Layout.Alignment.ALIGN_CENTER)\n        .build()\n')),(0,i.mdx)("h2",{id:"textinput"},"TextInput"),(0,i.mdx)("p",null," Component that renders an editable text input using an Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"EditText"),"."),(0,i.mdx)("h5",{id:"required-props-1"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"None.")),(0,i.mdx)("h4",{id:"usage-1"},"Usage"),(0,i.mdx)("p",null,"Because this component is backed by Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"EditText"),", many native capabilities are applicable!"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Use an ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.text.InputFilter ")," to set a text length limit or modify text input."),(0,i.mdx)("li",{parentName:"ul"},"Change the input representation by passing an ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.text.InputType")," constants."),(0,i.mdx)("li",{parentName:"ul"},"For performance reasons, avoid re-creating the Component with different props to change its configuration. You can instead use Event triggers ",(0,i.mdx)("inlineCode",{parentName:"li"},"OnTrigger")," to update text, request view focus or set selection. e.g. ",(0,i.mdx)("inlineCode",{parentName:"li"},'TextInput.setText(c, "myTextInputKey", "myText")'),".")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"private static final InputFilter lenFilter = new InputFilter.LengthFilter(maxLength);\nComponent component =\n    TextInput.create(c)\n        .initialText(text)\n        .textColorStateList(ColorStateList.valueOf(color))\n        .multiline(true)\n        .inputFilter(lenFilter)\n        .backgroundColor(Color.TRANSPARENT)\n        .inputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES)\n        .build()\n")),(0,i.mdx)("h2",{id:"image"},"Image"),(0,i.mdx)("p",null,"A component that is able to display drawable resources."),(0,i.mdx)("h5",{id:"required-props-2"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"Drawable drawable"),": Drawable to display.")),(0,i.mdx)("h4",{id:"usage-2"},"Usage"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    Image.create(c)\n        .drawableRes(R.drawable.my_drawable)\n        .scaleType(ImageView.ScaleType.CENTER_CROP)\n        .build()\n")),(0,i.mdx)("h2",{id:"card"},"Card"),(0,i.mdx)("p",null,"The Litho equivalent of an Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"CardView"),". ",(0,i.mdx)("inlineCode",{parentName:"p"},"Card"),' applies borders with shadows/elevation to a given component.\nIf your card is rendered on top of a dynamically colored background which cannot be "faked" using the ',(0,i.mdx)("inlineCode",{parentName:"p"},"Card")," component, use the less performant prop ",(0,i.mdx)("inlineCode",{parentName:"p"},"transparencyEnabled(true)"),"."),(0,i.mdx)("h5",{id:"required-props-3"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"Component content"),": The component to decorate.")),(0,i.mdx)("h4",{id:"usage-3"},"Usage"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    Card.create(c)\n        .content(myContentComponent)\n        .clippingColorRes(R.color.my_clipping_color)\n        .cornerRadiusDip(8)\n        .build()\n")),(0,i.mdx)("h2",{id:"solidcolor"},"SolidColor"),(0,i.mdx)("p",null,"A simple Component to render solid color."),(0,i.mdx)("h5",{id:"required-props-4"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"int color"),": Color to display.")),(0,i.mdx)("h4",{id:"usage-4"},"Usage"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n    SolidColor.create(c)\n        .color(Color.RED)\n        .alpha(0.5)\n        .build()\n")),(0,i.mdx)("h2",{id:"progress"},"Progress"),(0,i.mdx)("p",null,"Renders an infinitely spinning progress bar backed by the Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"ProgressBar"),"."),(0,i.mdx)("h5",{id:"required-props-5"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"None.")),(0,i.mdx)("h4",{id:"usage-5"},"Usage"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      Progress.create(c)\n        .indeterminateDrawableRes(R.drawable.my_loading_spinner)\n        .build()\n")),(0,i.mdx)("h2",{id:"spinner"},"Spinner"),(0,i.mdx)("p",null,"A simple spinner (dropdown) component. Derived from the standard Android ",(0,i.mdx)("inlineCode",{parentName:"p"},"Spinner"),"."),(0,i.mdx)("h5",{id:"required-props-6"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"List<String> options"),": List of possible options to select from."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"String selectedOption"),": Currently selected option.")),(0,i.mdx)("h4",{id:"usage-6"},"Usage"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"List<String> myOptions = ...\nComponent component =\n      Spinner.create(c)\n        .options(myOptions)\n        .selectedOption(myOptions.get(0))\n        .build()\n")),(0,i.mdx)("h2",{id:"verticalscroll"},"VerticalScroll"),(0,i.mdx)("p",null,"Component that wraps another component, allowing it to be vertically scrollable. It's analogous to Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"ScrollView"),"."),(0,i.mdx)("h5",{id:"required-props-7"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"Component childComponent"),": Component to vertically scroll.")),(0,i.mdx)("h4",{id:"usage-7"},"Usage"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      VerticalScroll.create(c)\n        .childComponent(myComponentToScroll)\n        .verticalFadingEdgeEnabled(true)\n        .fadingEdgeLengthDip(FADING_EDGE_LENGTH_DP)\n        .build()\n")),(0,i.mdx)("h2",{id:"horizontalscroll"},"HorizontalScroll"),(0,i.mdx)("p",null,"Component that wraps another component, allowing it to be horizontally scrollable. It's\nanalogous to Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"HorizontalScrollView"),"."),(0,i.mdx)("h5",{id:"required-props-8"},"Required Props"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"Component contentProps"),": Component to horizontally scroll.")),(0,i.mdx)("h4",{id:"usage-8"},"Usage"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Component component =\n      HorizontalScroll.create(c)\n        .contentProps(myComponentToScroll)\n        .build()\n")),(0,i.mdx)("h2",{id:"recycler"},"Recycler"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Recycler")," is the equivalent of Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),". We suggest you to use ",(0,i.mdx)("a",{parentName:"p",href:"/docs/sections/start"},"Sections")," for efficient lists rendering, which is using ",(0,i.mdx)("inlineCode",{parentName:"p"},"Recycler")," under the hood.\nHowever, if you really want to use ",(0,i.mdx)("inlineCode",{parentName:"p"},"Recycler")," directly, we have an ",(0,i.mdx)("a",{parentName:"p",href:"/docs/sections/recycler-collection-component"},"advanced guide dedicated to it"),"."))}c.isMDXComponent=!0}}]);