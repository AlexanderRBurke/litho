"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9517],{3905:(e,t,o)=>{o.r(t),o.d(t,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>d,withMDXComponents:()=>l});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},a.apply(this,arguments)}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function p(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),l=function(e){return function(t){var o=d(t.components);return n.createElement(e,a({},t,{components:o}))}},d=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),l=d(o),u=r,h=l["".concat(s,".").concat(u)]||l[u]||m[u]||a;return o?n.createElement(h,i(i({ref:t},c),{},{components:o})):n.createElement(h,i({ref:t},c))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,s=new Array(a);s[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=o[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},49508:(e,t,o)=>{o.r(t),o.d(t,{frontMatter:()=>i,contentTitle:()=>p,metadata:()=>c,toc:()=>l,default:()=>u});var n=o(87462),r=o(63366),a=(o(67294),o(3905)),s=["components"],i={id:"props-vs-state",title:"Props vs. State"},p=void 0,c={unversionedId:"best-practices/props-vs-state",id:"best-practices/props-vs-state",isDocsHomePage:!1,title:"Props vs. State",description:"Litho components have two types of data model: Props and State. It's important to understand the difference between the two so you'll know when you need to use each of them.",source:"@site/../docs/best-practices/props-vs-state.md",sourceDirName:"best-practices",slug:"/best-practices/props-vs-state",permalink:"/docs/best-practices/props-vs-state",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/best-practices/props-vs-state.md",tags:[],version:"current",frontMatter:{id:"props-vs-state",title:"Props vs. State"},sidebar:"mainSidebar",previous:{title:"Immutability",permalink:"/docs/best-practices/immutability"},next:{title:"Coding Style",permalink:"/docs/best-practices/coding-style"}},l=[{value:"Props",id:"props",children:[],level:2},{value:"State",id:"state",children:[],level:2},{value:"Using State or Props",id:"using-state-or-props",children:[],level:2},{value:"Example Scenario",id:"example-scenario",children:[],level:2}],d={toc:l};function u(e){var t=e.components,o=(0,r.Z)(e,s);return(0,a.mdx)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Litho components have two types of data model: ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/passing-data-to-components/spec-props"},"Props")," and ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/coordinate-state-actions/hoisting-state"},"State"),". It's important to understand the difference between the two so you'll know when you need to use each of them."),(0,a.mdx)("h2",{id:"props"},"Props"),(0,a.mdx)("p",null,"Props are for passing data down the tree from a component to its children. They are useful for defining the static part of a component's model, because props cannot be changed."),(0,a.mdx)("h2",{id:"state"},"State"),(0,a.mdx)("p",null,"State is reserved mostly for handling updates that result from interactions with a component or updates that can only be intercepted by that component. It is managed by the component and it's not visible outside of it; a component's parent has no knowledge of its children's state."),(0,a.mdx)("h2",{id:"using-state-or-props"},"Using State or Props"),(0,a.mdx)("p",null,"Following is a series of questions to help you decide whether you should use props or state for data on your component:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Does it define a property that remains unchanged? If so, it should be a prop."),(0,a.mdx)("li",{parentName:"ul"},"Does it need to be initialized and passed down from the parent? If so, it should be a prop."),(0,a.mdx)("li",{parentName:"ul"},"Should it change its value when a user interacts with the components (for instance clicking it)? If so, it should be a state."),(0,a.mdx)("li",{parentName:"ul"},"Can you compute its value based on other existing props and state? If so, you shouldn't create a state for it.")),(0,a.mdx)("p",null,"Making your components stateful increases the complexity of your application, which makes it harder to maintain. It may also make it more difficult to understand than the top-down props approach. You should try to keep the use of state for your components to a minimum, and your data flow top-down. If you have multiple sibling components whose state is co-dependent, you should identify a parent component that can instead hold and manage this state for its children."),(0,a.mdx)("h2",{id:"example-scenario"},"Example Scenario"),(0,a.mdx)("p",null,"Consider the scenario of a list of radio buttons where only one can be selected at a time.  In such a scenario, you'd keep a state specifying which item is selected in the parent and propagate that information top-down to the children through props."))}u.isMDXComponent=!0}}]);