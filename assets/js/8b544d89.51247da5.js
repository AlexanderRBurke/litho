"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5350],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>s,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),m=function(e){return function(n){var t=p(n.components);return r.createElement(e,o({},n,{components:t}))}},p=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),s=a,y=m["".concat(i,".").concat(s)]||m[s]||u[s]||o;return t?r.createElement(y,c(c({ref:n},d),{},{components:t})):r.createElement(y,c({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},72590:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>i,contentTitle:()=>c,metadata:()=>l,toc:()=>d,default:()=>p});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i={id:"recycler-component",title:"Recycler"},c=void 0,l={unversionedId:"recycler-component",id:"recycler-component",isDocsHomePage:!1,title:"Recycler",description:"If you choose to use Litho without using Sections, you can still use the",source:"@site/../docs/recycler-component.md",sourceDirName:".",slug:"/recycler-component",permalink:"/docs/recycler-component",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/recycler-component.md",version:"current",frontMatter:{id:"recycler-component",title:"Recycler"}},d=[{value:"Create a Recycler component",id:"create-a-recycler-component",children:[]},{value:"RecyclerBinder",id:"recyclerbinder",children:[]}],m={toc:d};function p(e){var n=e.components,i=(0,a.Z)(e,["components"]);return(0,o.mdx)("wrapper",(0,r.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"If you choose to use Litho without using ",(0,o.mdx)("a",{parentName:"p",href:"/docs/sections/start"},"Sections"),", you can still use the\n",(0,o.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/Recycler.html"},"Recycler")," component to create lists.  ",(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerCollectionComponent")," uses ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," under the hood."),(0,o.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,o.mdx)("h5",{parentName:"div"},(0,o.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.mdx)("div",{parentName:"div",className:"admonition-content"},(0,o.mdx)("p",{parentName:"div"},"Using the Recycler directly is not encouraged. Litho provides a utility component called ",(0,o.mdx)("a",{parentName:"p",href:"/docs/sections/recycler-collection-component#create-a-recyclercollectioncomponent"},"RecyclerCollectionComponent")," for writing lists, which abstracts all the complexity of using ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder"),"."))),(0,o.mdx)("h3",{id:"create-a-recycler-component"},"Create a Recycler component"),(0,o.mdx)("p",null,"You can use ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," as you would use any other component in the framework by building it and adding it as a child in your layout."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"@OnCreateLayout\nstatic Component onCreateLayout(\n    final ComponentContext c,\n    @Prop RecyclerBinder recyclerBinder) {\n\n  return Recycler.create(c)\n      .binder(recyclerBinder)\n      .build();\n}\n")),(0,o.mdx)("p",null,"This code will render a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," component that will display the content of ",(0,o.mdx)("inlineCode",{parentName:"p"},"recyclerBinder"),"."),(0,o.mdx)("h3",{id:"recyclerbinder"},"RecyclerBinder"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/RecyclerBinder.html"},"RecyclerBinder")," is the entry point to manipulate list-like UIs with components.\nIt keeps a list of all the components contained in the list and as the user scrolls through the list it computes layouts for items that are about to become visible."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder")," is the part of Litho that:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Serves as an ",(0,o.mdx)("inlineCode",{parentName:"li"},"Adapter")," for a ",(0,o.mdx)("inlineCode",{parentName:"li"},"RecyclerView")),(0,o.mdx)("li",{parentName:"ul"},"Defines the layout to use in the ",(0,o.mdx)("inlineCode",{parentName:"li"},"RecyclerView")," (ex Linear, Grid)"),(0,o.mdx)("li",{parentName:"ul"},"Manages all the complexity of computing layouts ahead of time in a background thread.")),(0,o.mdx)("p",null,(0,o.mdx)("img",{alt:"Layout range in action",src:t(93886).Z,title:"Layout range in action"})),(0,o.mdx)("p",null,"Let's start creating a ",(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"final RecyclerBinder recyclerBinder = new RecyclerBinder.Builder()\n    .build(c);\n")),(0,o.mdx)("p",null,"This will create the simplest possible ",(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder")," that will layout the content of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," as a vertical list."),(0,o.mdx)("p",null,"To have ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler")," use a grid layout we set it on the Builder:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"final RecyclerBinder recyclerBinder = new RecyclerBinder.Builder()\n    .layoutInfo(new GridLayoutInfo(c, spanCount))\n    .build(c);\n")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder")," exposes a set of APIs to manipulate the items that will be displayed in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Recycler"),"."),(0,o.mdx)("p",null,"The most commonly used are:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"recyclerBinder.appendItem(component)\nrecyclerBinder.insertItemAt(position, component);\nrecyclerBinder.updateItemAt(position, component);\nrecyclerBinder.removeItemAt(position);\nrecyclerBinder.moveItem(fromPosition, toPosition);\n")),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder"),"'s API works directly with components. Since a component is only a collection of ",(0,o.mdx)("strong",{parentName:"p"},"props"),", we can build any component ahead of time and leave the layout management to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder"),"."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder")," also supports receiving extra information about the way a component should be laid out. These extra information can be passed in through a ",(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentRenderInfo"),". Here's what the code looks like:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"recyclerBinder.insertItemAt(\n  position,\n  ComponentRenderInfo.create()\n      .component(component)\n      .isSticky(true)\n      .build());\n")),(0,o.mdx)("h4",{id:"using-recyclerbinder-with-diffutil"},"Using RecyclerBinder with DiffUtil"),(0,o.mdx)("p",null,"RecyclerBinder exposes by default bindings to be used in conjunction with ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/support/v7/util/DiffUtil.html"},"DiffUtil"),".\nLitho defines in its API a ",(0,o.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/RecyclerBinderUpdateCallback.html"},"RecyclerBinderUpdateCallback")," that implements ",(0,o.mdx)("inlineCode",{parentName:"p"},"ListUpdateCallback")," and therefore can be used to dispatch the ",(0,o.mdx)("inlineCode",{parentName:"p"},"DiffResult")," to a ",(0,o.mdx)("inlineCode",{parentName:"p"},"RecyclerBinder"),"."),(0,o.mdx)("p",null,"Here's an example of how ",(0,o.mdx)("inlineCode",{parentName:"p"},"DiffUtil")," can be used with Litho:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"\n  private final ComponentRenderer<Data> mComponentRenderer = new ComponentRenderer<> {\n    ComponentRenderInfo render(Data data, int idx) {\n      return ComponentRenderInfo.create()\n          .component(\n            DataComponent.create(mComponentContext)\n              .data(data))\n          .build();\n    }\n  }\n\n  public void onNewData(List<Data> newData) {\n    final DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new MyDataDiffCallback(mCurrentData, newData));\n    final RecyclerBinderUpdateCallback callback = RecyclerBinderUpdateCallback.acquire(\n      mCurrentData.size(),\n      newData,\n      mComponentRenderer,\n      mRecyclerBinder)\n\n    diffResult.dispatchUpdatesTo(callback);\n    callback.applyChangeset();\n    mRecyclerBinder.notifyChangeSetComplete(...);\n    RecyclerBinderUpdateCallback.release(callback);\n}\n")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"ComponentRenderer")," will be invoked whenever a new component needs to be created for a new or updated model in the list."))}p.isMDXComponent=!0},93886:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/range_small-9b914414d7173a4be6e6b4f29fb33584.gif"}}]);