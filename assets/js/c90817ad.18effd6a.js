"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8528],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>y,useMDXComponents:()=>p,withMDXComponents:()=>d});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),d=function(e){return function(t){var n=p(t.components);return i.createElement(e,o({},t,{components:n}))}},p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,v=d["".concat(r,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(v,l(l({ref:t},c),{},{components:n})):i.createElement(v,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=v;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},7055:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>r,contentTitle:()=>l,metadata:()=>s,toc:()=>c,default:()=>p});var i=n(87462),a=n(63366),o=(n(67294),n(3905)),r={id:"accessibility-overview",title:"Overview"},l=void 0,s={unversionedId:"accessibility/accessibility-overview",id:"accessibility/accessibility-overview",isDocsHomePage:!1,title:"Overview",description:"This page was moved from the old website without any change and might be updated",source:"@site/../docs/accessibility/accessibility-overview.md",sourceDirName:"accessibility",slug:"/accessibility/accessibility-overview",permalink:"/docs/accessibility/accessibility-overview",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/accessibility/accessibility-overview.md",version:"current",frontMatter:{id:"accessibility-overview",title:"Overview"},sidebar:"mainSidebar",previous:{title:"Advanced: Transitions key scoping",permalink:"/docs/animations/transition-key-types"},next:{title:"Analysing Performance",permalink:"/docs/performance/analysing-performance"}},c=[{value:"Content Description",id:"content-description",children:[]},{value:"Custom accessibility",id:"custom-accessibility",children:[]},{value:"Extra accessibility nodes",id:"extra-accessibility-nodes",children:[]},{value:"Accessibility Handling",id:"accessibility-handling",children:[]},{value:"Accessibility Heading",id:"accessibility-heading",children:[]}],d={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.mdx)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,o.mdx)("h5",{parentName:"div"},(0,o.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Content will be updated")),(0,o.mdx)("div",{parentName:"div",className:"admonition-content"},(0,o.mdx)("p",{parentName:"div"},"This page was moved from the old website without any change and might be updated"))),(0,o.mdx)("h2",{id:"content-description"},"Content Description"),(0,o.mdx)("p",null,"All components support content description by default. This means all layout builders have a prop of type ",(0,o.mdx)("inlineCode",{parentName:"p"},"CharSequence")," named ",(0,o.mdx)("inlineCode",{parentName:"p"},"contentDescription")," ."),(0,o.mdx)("p",null,"Setting a content description on any component is as simple as:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'Image.create(c)\n    .imageRes(R.drawable.some_image)\n    .contentDescription("This is an image")\n    .build())\n')),(0,o.mdx)("p",null,"The content description set here has the same semantics as when it is set on an Android view."),(0,o.mdx)("h2",{id:"custom-accessibility"},"Custom accessibility"),(0,o.mdx)("p",null,"Mount Specs can implement their own accessibility support by implementing an ",(0,o.mdx)("inlineCode",{parentName:"p"},"@OnPopulateAccessibilityNode")," method. This method accepts an ",(0,o.mdx)("inlineCode",{parentName:"p"},"AccessibilityNodeInfoCompat")," argument as well as any props that are specified on the spec method."),(0,o.mdx)("p",null,"For example, accessibility for ",(0,o.mdx)("inlineCode",{parentName:"p"},"Text")," is specified using the following method:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"@OnPopulateAccessibilityNode\nstatic void onPopulateAccessibilityNode(\n    AccessibilityNodeInfoCompat accessibilityNode,\n    @Prop CharSequence text) {\n  accessibilityNode.setText(text);\n}\n")),(0,o.mdx)("p",null,"This is only applicable for components which mount drawables, since if the component mounts a view, the support is built-in."),(0,o.mdx)("h2",{id:"extra-accessibility-nodes"},"Extra accessibility nodes"),(0,o.mdx)("p",null,"On more complex mount specs that need to expose extra nodes to the accessibility framework, you'll have to implement three extra methods with the following annotations:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"GetExtraAccessibilityNodesCount"),": Returns number of extra accessibility nodes exposed by the component."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"OnPopulateExtraAccessibilityNode"),": Populates the extra accessibility node with the given bounds.")),(0,o.mdx)("h2",{id:"accessibility-handling"},"Accessibility Handling"),(0,o.mdx)("p",null,"All components support a set of events corresponding to ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html"},(0,o.mdx)("inlineCode",{parentName:"a"},"AccessibilityDelegateCompat")),"'s methods.\nThese events have attributes for each parameter of the corresponding ",(0,o.mdx)("inlineCode",{parentName:"p"},"AccessibilityDelegateCompat")," method ",(0,o.mdx)("em",{parentName:"p"},"and")," an additional parameter of type ",(0,o.mdx)("inlineCode",{parentName:"p"},"AccessibilityDelegateCompat")," called ",(0,o.mdx)("inlineCode",{parentName:"p"},"superDelegate"),", which allows you to explicitly call ",(0,o.mdx)("inlineCode",{parentName:"p"},"View"),"'s default implementation of accessibility methods where necessary."),(0,o.mdx)("p",null,"Here is an overview of the supported events:"),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Event"),(0,o.mdx)("th",{parentName:"tr",align:null},"AccessibilityDelegate method"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"DispatchPopulateAccessibilityEventEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#dispatchPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"},"dispatchPopulateAccessibilityEvent"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"OnInitializeAccessibilityEventEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"},"onInitializeAccessibilityEvent"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"OnInitializeAccessibilityNodeInfoEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)"},"onInitializeAccessibilityNodeInfo"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"OnPopulateAccessibilityEventEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"},"onPopulateAccessibilityEvent"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"OnRequestSendAccessibilityEventEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent)"},"onRequestSendAccessibilityEvent"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"PerformAccessibilityActionEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#performAccessibilityAction(android.view.View, int, android.os.Bundle)"},"performAccessibilityAction"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"SendAccessibilityEventEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#sendAccessibilityEvent(android.view.View, int)"},"sendAccessibilityEvent"))),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"SendAccessibilityUncheckedEvent"),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#sendAccessibilityEventUnchecked(android.view.View, android.view.accessibility.AccessibilityEvent)"},"sendAccessibilityEventUnchecked"))))),(0,o.mdx)("p",null,"Setting a handler for any of these events will result in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"AccessibilityDelegate")," being set on the mounted ",(0,o.mdx)("inlineCode",{parentName:"p"},"View"),", which will call your event handler when the corresponding method is called."),(0,o.mdx)("p",null,"Whenever a method for which you haven't supplied an event handler is called, the delegate will defer to the Android ",(0,o.mdx)("inlineCode",{parentName:"p"},"View"),"'s default implementation (equivalent to calling ",(0,o.mdx)("inlineCode",{parentName:"p"},"super")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"superDelegate"),"'s implementation)."),(0,o.mdx)("p",null,"For example, here are the steps for overriding ",(0,o.mdx)("inlineCode",{parentName:"p"},"onInitializeAccessibilityNodeInfo")," for a component:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Implementing an event handler")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"@OnEvent(OnInitializeAccessibilityNodeInfoEvent.class)\nstatic void onInitializeAccessibilityNodeInfoEvent(\n    ComponentContext c,\n    @FromEvent AccessibilityDelegateCompat superDelegate,\n    @FromEvent View host,\n    @FromEvent AccessibilityNodeInfoCompat info) {\n  // Equivalent to calling super on a regular AccessibilityDelegate, not required\n  superDelegate.onInitializeAccessibilityNodeInfo(view, info);\n  // My implementation\n}\n")),(0,o.mdx)("ol",{start:2},(0,o.mdx)("li",{parentName:"ol"},"Setting that event handler on a component:")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"Text.create(c)\n    .text(title)\n    .onInitializeAccessiblityNodeInfoHandler(MyComponent.onInitializeAccessibilityNodeInfoEvent(c))\n")),(0,o.mdx)("p",null,"One of the best features of ",(0,o.mdx)("inlineCode",{parentName:"p"},"AccessibilityDelegate"),"s in general is their reusability even across different types of ",(0,o.mdx)("inlineCode",{parentName:"p"},"View"),'s. This can also be achieved within Litho by creating a wrapper spec that takes in a component and adds the desired event handlers. For example, let\'s say we want to have a Component that appends "please" to every ',(0,o.mdx)("inlineCode",{parentName:"p"},"AccessibilityEvent")," that it announces."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'@LayoutSpec\nclass PoliteComponentWrapper {\n\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @Prop Component content) {\n\n    return Wrapper.create(c)\n        .delegate(content)\n        .onPopulateAccessibilityEventHandler(\n            PoliteComponentWrapper.onPopulateAccessibilityEvent(c))\n        .build();\n  }\n\n  @OnEvent(OnPopulateAccessibilityEvent.class)\n  static void onPopulateAccessibilityEvent(\n      ComponentContext c,\n      @FromEvent AccessibilityDelegateCompat superDelegate,\n      @FromEvent View view\n      @FromEvent AccessibilityEvent event) {\n    superDelegate.onPopulateAccessibilityEvent(view, event);\n    event.getText().add("please");\n  }\n}\n')),(0,o.mdx)("p",null,"Now you can replace any usages of your component with ",(0,o.mdx)("inlineCode",{parentName:"p"},"PoliteComponentWrapper")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"@OnCreateLayout\nstatic Component onCreateLayout(\n    ComponentContext c,\n    @Prop CharSequence text) {\n\n  return PoliteComponentWrapper.create(c)\n      .content(\n           Text.create(c)\n               .text(text))\n      .build();\n}\n")),(0,o.mdx)("h2",{id:"accessibility-heading"},"Accessibility Heading"),(0,o.mdx)("p",null,'Heading is an accessibility property and will help the users to choose to "Navigate by Headings" and ignore scrolling through each and every subitem under a heading. "Navigate based on Heading" can be selected from "Local Context Menu" when talkback is on. Talkback gesture for "Local Context Menu" is ',(0,o.mdx)("strong",{parentName:"p"},"Swipe up then right"),".\nMaking any component an Accessibility Header is as simple as:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'Row.create(c)\n    .contentDescription("This is an accessibility heading")\n    .accessibilityHeading(true)\n    .build()\n')))}p.isMDXComponent=!0}}]);