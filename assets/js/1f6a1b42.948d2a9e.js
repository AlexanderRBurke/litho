"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3793],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>m});var o=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},a.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=o.createContext({}),m=function(e){return function(n){var t=d(n.components);return o.createElement(e,a({},n,{components:t}))}},d=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=d(t),p=l,f=m["".concat(i,".").concat(p)]||m[p]||u[p]||a;return t?o.createElement(f,r(r({ref:n},s),{},{components:t})):o.createElement(f,r({ref:n},s))}));function y(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=f;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},85800:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>r,contentTitle:()=>c,metadata:()=>s,toc:()=>m,default:()=>p});var o=t(87462),l=t(63366),a=(t(67294),t(3905)),i=["components"],r={id:"lazycollections",title:"Lazy Collections"},c=void 0,s={unversionedId:"kotlin/lazycollections/lazycollections",id:"kotlin/lazycollections/lazycollections",isDocsHomePage:!1,title:"Lazy Collections",description:"Motivation",source:"@site/../docs/kotlin/lazycollections/lazycollections.mdx",sourceDirName:"kotlin/lazycollections",slug:"/kotlin/lazycollections/lazycollections",permalink:"/docs/kotlin/lazycollections/lazycollections",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/lazycollections/lazycollections.mdx",tags:[],version:"current",frontMatter:{id:"lazycollections",title:"Lazy Collections"}},m=[{value:"Motivation",id:"motivation",children:[],level:2},{value:"Lazy Collections",id:"lazy-collections",children:[],level:2}],d={toc:m};function p(e){var n=e.components,t=(0,l.Z)(e,i);return(0,a.mdx)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h2",{id:"motivation"},"Motivation"),(0,a.mdx)("p",null,"A simple, but not scalable, way to render a list of components is to use a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Column")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"Row")," container:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_column_example end=end_column_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_column_example",end:"end_column_example"},"class FriendsColumn(private val friends: List<Person>) : KComponent() {\n  override fun ComponentScope.render(): Component = VerticalScroll {\n    Column { friends.forEach { friend -> child(Text(friend.name)) } }\n  }\n}\n")),(0,a.mdx)("p",null,"The above example creates a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Column")," and adds child ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," component for each friend. It's made scrollable by wrapping it in a ",(0,a.mdx)("inlineCode",{parentName:"p"},"VerticalScroll"),"."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},(0,a.mdx)("em",{parentName:"strong"}," This approach is inefficient and inflexible when dealing with a large number of items, or when the items are expected to be updated. "))),(0,a.mdx)("p",null,"Consider if there were 100 friends. During the layout of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Column")," you would also layout 100 ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," components, despite only a few being visible on the screen. If one of the names was updated or changed position, a layout of all 100 ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," components would be triggered and the change would be applied without an animation."),(0,a.mdx)("h2",{id:"lazy-collections"},"Lazy Collections"),(0,a.mdx)("p",null,"Lazy collections are components that can efficiently render a scrollable list of child components using Android's ",(0,a.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),"."),(0,a.mdx)("p",null,"Lazy collections are available as follows:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyList.kt"},"LazyList")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyGrid.kt"},"LazyGrid")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyStaggeredGrid.kt"},"LazyStaggeredGrid"),".")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_lazy_list_example end=end_lazy_list_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_lazy_list_example",end:"end_lazy_list_example"},"class FriendLazyList(private val friends: List<Person>) : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    friends.forEach { friend -> child(id = friend.id, component = Text(friend.name)) }\n  }\n}\n")),(0,a.mdx)("p",null,"The above example creates a ",(0,a.mdx)("inlineCode",{parentName:"p"},"LazyList")," and adds a child ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," component for each list item. It doesn't require all children to be laid out to start showing content on screen. Notice that the code is similar to creating a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Column"),". The main difference being that we can optionally specify an ",(0,a.mdx)("inlineCode",{parentName:"p"},"id")," parameter on each child, which is required for ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/lazycollections/lazycollections-working-with-updates"},"applying updates correctly"),"."))}p.isMDXComponent=!0}}]);